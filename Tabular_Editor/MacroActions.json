{
  "Actions": [
    {
      "Name": "BPA\\BPARules",
      "Enabled": "true",
      "Execute": "// Documentação\r\n// https://github.com/microsoft/Analysis-Services/tree/master/BestPracticeRules\r\n// Video\r\n// https://www.youtube.com/watch?v=5pu9FoTUpys\r\n\r\nSystem.Net.WebClient w = new System.Net.WebClient(); \r\n\r\nstring path = System.Environment.GetFolderPath(System.Environment.SpecialFolder.LocalApplicationData);\r\nstring downloadLoc = path+@\"\\TabularEditor\\BPARules.json\";\r\nstring url = \"https://raw.githubusercontent.com/microsoft/Analysis-Services/master/BestPracticeRules/BPARules.json\";\r\nstring dlMessage = \"Downloaded BPARules.json. Please restart Tabular Editor.\";\r\n\r\nif (System.IO.File.Exists(downloadLoc))\r\n{\r\n    if (System.Windows.Forms.MessageBox.Show(\"Would you like to overwrite the existing BPARules.json file?\",\"Overwrite Existing BPA Rules\",System.Windows.Forms.MessageBoxButtons.YesNo,System.Windows.Forms.MessageBoxIcon.Warning) == System.Windows.Forms.DialogResult.Yes)\r\n    {\r\n        w.DownloadFile(url, downloadLoc);\r\n        System.Windows.Forms.MessageBox.Show(dlMessage,\"Overwrite Existing BPA Rules\",System.Windows.Forms.MessageBoxButtons.OK,System.Windows.Forms.MessageBoxIcon.Information);\r\n    }\r\n    else\r\n    {\r\n        System.Windows.Forms.MessageBox.Show(\"Did not download BPARules.json.\",\"Overwrite Existing BPA Rules\",System.Windows.Forms.MessageBoxButtons.OK,System.Windows.Forms.MessageBoxIcon.Information);\r\n    }\r\n}\r\nelse\r\n{\r\n    System.Windows.Forms.MessageBox.Show(dlMessage,\"Download BPA Rules\",System.Windows.Forms.MessageBoxButtons.OK,System.Windows.Forms.MessageBoxIcon.Information);\r\n    w.DownloadFile(url, downloadLoc);\r\n}",
      "Tooltip": "Importar regras de melhores práticas do Github",
      "ValidContexts": "Model"
    },
    {
      "Name": "BPA\\BPARules_Renner",
      "Enabled": "true",
      "Execute": "// Documentação\r\n// https://github.com/microsoft/Analysis-Services/tree/master/BestPracticeRules\r\n// Video\r\n// https://www.youtube.com/watch?v=5pu9FoTUpys\r\n\r\nSystem.Net.WebClient w = new System.Net.WebClient();\r\n\r\nstring path = System.Environment.GetFolderPath(System.Environment.SpecialFolder.LocalApplicationData);\r\nstring downloadLoc = path+@\"\\TabularEditor\\BPARules.json\";\r\nstring url = \"https://raw.githubusercontent.com/rafaelxkr/Power-BI/master/Tabular_Editor/BPARules.json\";\r\nstring dlMessage = \"Atualizado as regras de BPA!! Por favor reinicie o Tabular Editor.\";\r\n\r\nif (System.IO.File.Exists(downloadLoc))\r\n{\r\n   if (System.Windows.Forms.MessageBox.Show(\"Gostaria de atualizar as regras de BPA existentes?\",\"Atualizar regras de BPA existentes\",System.Windows.Forms.MessageBoxButtons.YesNo,System.Windows.Forms.MessageBoxIcon.Warning) == System.Windows.Forms.DialogResult.Yes)\r\n   {\r\n       w.DownloadFile(url, downloadLoc);\r\n       System.Windows.Forms.MessageBox.Show(dlMessage,\"Atualizar regras de BPA existentes\",System.Windows.Forms.MessageBoxButtons.OK,System.Windows.Forms.MessageBoxIcon.Information);\r\n   }\r\n   else\r\n   {\r\n       System.Windows.Forms.MessageBox.Show(\"Não foi atualizado as regras de BPA\",\"Atualizar regras de BPA existentes\",System.Windows.Forms.MessageBoxButtons.OK,System.Windows.Forms.MessageBoxIcon.Information);\r\n   }\r\n}\r\nelse\r\n{\r\n   System.Windows.Forms.MessageBox.Show(dlMessage,\"Baixe as regras do BPA\",System.Windows.Forms.MessageBoxButtons.OK,System.Windows.Forms.MessageBoxIcon.Information);\r\n   w.DownloadFile(url, downloadLoc);\r\n}",
      "Tooltip": "Importar regras de melhores práticas do Github",
      "ValidContexts": "Model"
    },
    {
      "Name": "BPA\\BPARules_Renner_BASE64",
      "Enabled": "true",
      "Execute": "using System;\r\nusing System.IO;\r\nusing System.Text;\r\nSystem.Net.WebClient w = new System.Net.WebClient(); \r\n\r\n\r\nstring path = System.Environment.GetFolderPath(System.Environment.SpecialFolder.LocalApplicationData);\r\nstring downloadLoc = path+@\"\\TabularEditor\\BPARules.json\";\r\nstring dlMessage = \"Atualizado as regras de BPA!! Por favor reinicie o Tabular Editor.\";\r\n\r\n\r\nstring BPA = \"\";\r\nbyte[] data = Convert.FromBase64String(BPA);\r\nstring decodedString = System.Text.Encoding.UTF8.GetString(data);\r\n\r\nif (System.IO.File.Exists(downloadLoc))\r\n{\r\n    if (System.Windows.Forms.MessageBox.Show(\"Gostaria de atualizar as regras de BPA existentes?\",\"Atualizar regras de BPA existentes\",System.Windows.Forms.MessageBoxButtons.YesNo,System.Windows.Forms.MessageBoxIcon.Warning) == System.Windows.Forms.DialogResult.Yes)\r\n    {\r\n        File.WriteAllText(downloadLoc, decodedString);\r\n        System.Windows.Forms.MessageBox.Show(dlMessage,\"Atualizar regras de BPA existentes\",System.Windows.Forms.MessageBoxButtons.OK,System.Windows.Forms.MessageBoxIcon.Information);\r\n    }\r\n    else\r\n    {\r\n        System.Windows.Forms.MessageBox.Show(\"Não foi atualizado as regras de BPA\",\"Atualizar regras de BPA existentes\",System.Windows.Forms.MessageBoxButtons.OK,System.Windows.Forms.MessageBoxIcon.Information);\r\n    }\r\n}\r\nelse\r\n{\r\n    System.Windows.Forms.MessageBox.Show(dlMessage,\"Baixe as regras do BPA\",System.Windows.Forms.MessageBoxButtons.OK,System.Windows.Forms.MessageBoxIcon.Information);\r\n    File.WriteAllText(downloadLoc, decodedString);\r\n}",
      "Tooltip": "Importar regras de melhores práticas",
      "ValidContexts": "Model"
    },
    {
      "Name": "BPA\\BPARules_Standard",
      "Enabled": "true",
      "Execute": "// Documentação\r\n// https://github.com/microsoft/Analysis-Services/tree/master/BestPracticeRules\r\n// Video\r\n// https://www.youtube.com/watch?v=5pu9FoTUpys\r\n\r\nSystem.Net.WebClient w = new System.Net.WebClient(); \r\n\r\nstring path = System.Environment.GetFolderPath(System.Environment.SpecialFolder.LocalApplicationData);\r\nstring downloadLoc = path+@\"\\TabularEditor\\BPARules.json\";\r\nstring url = \"https://raw.githubusercontent.com/rafaelxkr/Power-BI/master/Tabular_Editor/BPARules_Standard.json\";\r\nstring dlMessage = \"Atualizado as regras de BPA!! Por favor reinicie o Tabular Editor.\";\r\n\r\nif (System.IO.File.Exists(downloadLoc))\r\n{\r\n   if (System.Windows.Forms.MessageBox.Show(\"Gostaria de atualizar as regras de BPA existentes?\",\"Atualizar regras de BPA existentes\",System.Windows.Forms.MessageBoxButtons.YesNo,System.Windows.Forms.MessageBoxIcon.Warning) == System.Windows.Forms.DialogResult.Yes)\r\n   {\r\n       w.DownloadFile(url, downloadLoc);\r\n       System.Windows.Forms.MessageBox.Show(dlMessage,\"Atualizar regras de BPA existentes\",System.Windows.Forms.MessageBoxButtons.OK,System.Windows.Forms.MessageBoxIcon.Information);\r\n   }\r\n   else\r\n   {\r\n       System.Windows.Forms.MessageBox.Show(\"Não foi atualizado as regras de BPA\",\"Atualizar regras de BPA existentes\",System.Windows.Forms.MessageBoxButtons.OK,System.Windows.Forms.MessageBoxIcon.Information);\r\n   }\r\n}\r\nelse\r\n{\r\n   System.Windows.Forms.MessageBox.Show(dlMessage,\"Baixe as regras do BPA\",System.Windows.Forms.MessageBoxButtons.OK,System.Windows.Forms.MessageBoxIcon.Information);\r\n   w.DownloadFile(url, downloadLoc);\r\n}",
      "Tooltip": "Importar regras de melhores práticas do Github",
      "ValidContexts": "Model"
    },
    {
      "Name": "BPA\\Exportar Resultado BPA",
      "Enabled": "true",
      "Execute": "using TabularEditor.BestPracticeAnalyzer;\r\n\r\nvar bpa = new Analyzer();\r\nbpa.SetModel(Model);\r\n\r\nvar sb = new System.Text.StringBuilder();\r\nstring newline = Environment.NewLine;\r\n\r\nsb.Append(\"RuleCategory\" + '\\t' + \"RuleName\" + '\\t' + \"ObjectName\" + '\\t' + \"ObjectType\" + '\\t' + \"RuleSeverity\" + '\\t' + \"HasFixExpression\" + newline);\r\n\r\nforeach (var a in bpa.AnalyzeAll().ToList())\r\n{\r\n    sb.Append(a.Rule.Category + '\\t' + a.RuleName + '\\t' + a.ObjectName + '\\t' + a.ObjectType + '\\t' + a.Rule.Severity + '\\t' + a.CanFix + newline);\r\n}\r\n\r\nsb.Output();",
      "Tooltip": "Exporta o resultado da Analise do Power BI para colar no Excel",
      "ValidContexts": "Model"
    },
    {
      "Name": "DAX\\Criar Parametro de Campo",
      "Enabled": "true",
      "Execute": "// Before running the script, select the measures or columns that you\r\n// would like to use as field parameters (hold down CTRL to select multiple\r\n// objects). Also, you may change the name of the field parameter table\r\n// below. NOTE: If used against Power BI Desktop, you must enable unsupported\r\n// features under File > Preferences (TE2) or Tools > Preferences (TE3).\r\n\r\n// Nome da Tabela\r\nvar name = \"pMedidas ou Colunas\";\r\n\r\nif(Selected.Columns.Count == 0 && Selected.Measures.Count == 0) throw new Exception(\"No columns or measures selected!\");\r\n\r\n// Construct the DAX for the calculated table based on the current selection:\r\nvar objects = Selected.Columns.Any() ? Selected.Columns.Cast<ITabularTableObject>() : Selected.Measures;\r\nvar dax = \"{\\n    \" + string.Join(\",\\n    \", objects.Select((c,i) => string.Format(\"(\\\"{0}\\\", NAMEOF('{1}'[{0}]), {2})\", c.Name, c.Table.Name, i))) + \"\\n}\";\r\n\r\n// Add the calculated table to the model:\r\nvar table = Model.AddCalculatedTable(name, dax);\r\n\r\n// In TE2 columns are not created automatically from a DAX expression, so \r\n// we will have to add them manually:\r\nvar te2 = table.Columns.Count == 0;\r\nvar nameColumn = te2 ? table.AddCalculatedTableColumn(name, \"[Value1]\") : table.Columns[\"Value1\"] as CalculatedTableColumn;\r\nvar fieldColumn = te2 ? table.AddCalculatedTableColumn(name + \" Fields\", \"[Value2]\") : table.Columns[\"Value2\"] as CalculatedTableColumn;\r\nvar orderColumn = te2 ? table.AddCalculatedTableColumn(name + \" Order\", \"[Value3]\") : table.Columns[\"Value3\"] as CalculatedTableColumn;\r\n\r\nif(!te2) {\r\n    // Rename the columns that were added automatically in TE3:\r\n    nameColumn.IsNameInferred = false;\r\n    nameColumn.Name = name;\r\n    fieldColumn.IsNameInferred = false;\r\n    fieldColumn.Name = name + \" Fields\";\r\n    orderColumn.IsNameInferred = false;\r\n    orderColumn.Name = name + \" Order\";\r\n}\r\n// Set remaining properties for field parameters to work\r\n// See: https://twitter.com/markbdi/status/1526558841172893696\r\nnameColumn.SortByColumn = orderColumn;\r\nnameColumn.GroupByColumns.Add(fieldColumn);\r\nfieldColumn.SortByColumn = orderColumn;\r\nfieldColumn.SetExtendedProperty(\"ParameterMetadata\", \"{\\\"version\\\":3,\\\"kind\\\":2}\", ExtendedPropertyType.Json);\r\nfieldColumn.IsHidden = true;\r\norderColumn.IsHidden = true;",
      "Tooltip": "Selecione as medidas ou colunas que você deseja criar um parametro de campo",
      "ValidContexts": "Measure, Column"
    },
    {
      "Name": "DAX\\Substitui o nome da medida",
      "Enabled": "true",
      "Execute": "//Substitui o nome da medida\r\n\r\nforeach(var m in Model.AllMeasures) {\r\n    string Antigo = \"Texto_Antigo\";\r\n    string Novo = \"Texto_Novo\";\r\n    string Medida = m.Name;\r\n    \r\n    bool Inicia          = m.Name.EndsWith(Antigo);\r\n    bool Termina         = m.Name.EndsWith(Antigo);\r\n    bool Substituir_Tudo = m.Name.Contains(Antigo);\r\n    \r\n\r\n    // Se termina com Medida01 substituir Medida01 por ...\r\n    if  (Termina)\r\n    {\r\n        m.Name = m.Name.Replace(Antigo,Novo);\r\n    }\r\n\r\n}  \r\n",
      "Tooltip": "esse código otimiza o modelo",
      "ValidContexts": "Model"
    },
    {
      "Name": "DAX\\Substituir",
      "Enabled": "true",
      "Execute": "// utilize \"/n\" como enter para quebrar o texto para uma nova linha\r\n\r\n\r\nvar FromString = \"CALCULATE\";\r\nvar ToString = \"VAR Data = MAXX(ALL(fPricing[Dia do Calendário]),[Dia do Calendário])\\n RETURN \\n CALCULATE\";\r\n\r\n//foreach (var m in Model.AllMeasures) //Todas as medidas\r\nforeach (var m in Selected.Measures) //Somente medidas selecionadas\r\n{\r\nm.Expression = m.Expression.Replace(FromString,ToString);\r\n}",
      "Tooltip": "Substitui texto nas medidas selecionadas",
      "ValidContexts": "Measure"
    },
    {
      "Name": "Documentação\\DMV",
      "Enabled": "true",
      "Execute": "/////////////////////////////////////////////////////////////////////////////////////////////\r\n//\r\n// Evaluates 9 DMVs and 1 DAX query, then exports results in a .tsv format\r\n//\r\n/////////////////////////////////////////////////////////////////////////////////////////////\r\n//\r\n// DMVs\r\n//\r\n/////////////////////////////////////////////////////////////////////////////////////////////\r\n//https://data-goblins.com/power-bi/te-dmv-scripts\r\n//https://gist.github.com/data-goblin/bc76d7622dcdadbc66e4a00ae95588c9\r\n\r\nusing System.IO;\r\nusing System;\r\nusing System.Text;\r\n\r\n// Get all measures\r\n//var measures_query =    \"SELECT * FROM $SYSTEM.TMSCHEMA_MEASURES\";\r\n//var measures_outfile =      @\"dax_measures\";\r\n\r\n// Get all calculated columns\r\n//var calccol_query =     \"SELECT * FROM $SYSTEM.TMSCHEMA_COLUMNS WHERE [Type] = 2\";\r\n//var calccol_outfile =       @\"dax_calculated-columns\";\r\n\r\n// Get all calculated tables\r\n//var calctable_query =   \"SELECT * FROM $SYSTEM.TMSCHEMA_PARTITIONS WHERE [Type] = 2\";\r\n//var calctable_outfile =     @\"dax_calculated-tables\";\r\n\r\n// Get all calculation items\r\n//var calcitems_query =   \"SELECT * FROM $SYSTEM.TMSCHEMA_CALCULATION_ITEMS\";\r\n//var calcitems_outfile =     @\"dax_calculation-items\";\r\n\r\n// Get all partitions (M expression + Calculated Tables)\r\n//var partitions_query =  \"SELECT * FROM $SYSTEM.TMSCHEMA_PARTITIONS\";\r\n//var partitions_outfile =    @\"power-query_partitions\";\r\n\r\n// Get all M expressions\r\n//var expressions_query = \"SELECT * FROM $SYSTEM.TMSCHEMA_EXPRESSIONS\";\r\n//var expressions_outfile =   @\"power-query_expressions\";\r\n\r\n// Get all tables\r\nvar tables_query =      \"SELECT * FROM $SYSTEM.TMSCHEMA_TABLES\";\r\nvar tables_outfile =        @\"model_tables\";\r\n\r\n// Get all columns\r\nvar columns_query =     \"SELECT * FROM $SYSTEM.TMSCHEMA_COLUMNS\";\r\nvar columns_outfile =       @\"model_columns\";\r\n\r\n// Get all data sources\r\nvar doc_measure_query = \"SELECT MEASUREGROUP_NAME AS [Tabela],MEASURE_DISPLAY_FOLDER AS [Pasta],MEASURE_NAME AS [Nome da Medida],EXPRESSION AS [DAX]FROM $SYSTEM.MDSCHEMA_MEASURES WHERE MEASURE_IS_VISIBLE ORDER BY MEASURE_DISPLAY_FOLDER ASC\";\r\nvar doc_measure_outfile =   @\"doc_measure\";\r\n\r\n// Get all data sources\r\n//var datasources_query = \"SELECT * FROM $SYSTEM.DISCOVER_POWERBI_DATASOURCES\";\r\n//var datasources_outfile =   @\"model_sources\";\r\n\r\n/////////////////////////////////////////////////////////////////////////////////////////////\r\n//\r\n// Export a custom DAX query - this one is the 'Date'[Date] values with an index\r\n//\r\n/////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n// DAX Query\r\nvar your_dax_query =    \"EVALUATE ADDCOLUMNS( DISTINCT ( 'dCalendario'[Datas] ), \\\"Index\\\", INT([Datas]) - MIN('dCalendario'[Datas]) )\";\r\nvar your_dax_outfile =      @\"dax-query-results_date\";\r\n\r\n/////////////////////////////////////////////////////////////////////////////////////////////\r\n//\r\n// Append each query to a list\r\n//\r\n/////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n// To add your own DMV or DAX query you need to add the new variable to the end of each list.\r\nList<string> queryList = new List<string>\r\n            { \r\n              //measures_query, \r\n              //calccol_query, \r\n              //calctable_query, \r\n              //calcitems_query, \r\n              //partitions_query,\r\n              //expressions_query, \r\n              tables_query,\r\n              columns_query, \r\n              //datasources_query,\r\n              //your_dax_query,\r\n              doc_measure_query\r\n            };\r\n\r\nList<string> fileList = new List<string>\r\n            {\r\n              //measures_outfile, \r\n              //calccol_outfile, \r\n              //calctable_outfile, \r\n              //calcitems_outfile, \r\n              //partitions_outfile,\r\n              //expressions_outfile, \r\n              tables_outfile,\r\n              columns_outfile, \r\n              //datasources_outfile,\r\n              //your_dax_outfile\r\n              doc_measure_outfile\r\n            };\r\n\r\n/////////////////////////////////////////////////////////////////////////////////////////////\r\n//\r\n// Output path\r\n//\r\n/////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n// Get model name\r\nstring modelname = Model.Database.Name;\r\n\r\n// Set the path for the output \r\n\r\n//           -- <CHANGE TO YOUR OWN PATH> --\r\nvar outpath = @\"C:\\Users\\rafae\\Downloads\\DMV\\\" + modelname + \"_\";\r\n\r\n// Column seaprator & file extension\r\nvar columnSeparator = @\"\"\"\" +  \"\\t\" + @\"\"\"\" ;\r\nvar fileextension = \".tsv\";\r\n\r\n/////////////////////////////////////////////////////////////////////////////////////////////\r\n//\r\n// Evaluation & export\r\n//\r\n/////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n// For each item in the query list\r\nforeach ( var i in queryList ) \r\n    {\r\n        // Get the index of the item in the list\r\n        int index = queryList.FindIndex(a => a == i);\r\n\r\n        // Execute the query\r\n        using(var daxReader = ExecuteReader(queryList[index]))\r\n            {\r\n                // Start writing the file at the path with the name and extension\r\n                using(var fileWriter = new StreamWriter(outpath + fileList[index] + fileextension, false, Encoding.GetEncoding(1253)))\r\n                {\r\n                    // Write column headers\r\n                    // *NOTE* If exporting a DAX query and not a DMV result, you need to remove the -1 from daxReader.FieldCount\r\n                     fileWriter.WriteLine(@\"\"\"\" + string.Join(columnSeparator, Enumerable.Range(0, daxReader.FieldCount - 1).Select(f => daxReader.GetName(f)))+ @\"\"\"\");\r\n                \r\n                    // Write rows\r\n                    while(daxReader.Read())\r\n                    {\r\n                        var rowValues = new object[daxReader.FieldCount];\r\n                        daxReader.GetValues(rowValues);\r\n    \r\n                        // Remove newline special characters, which cause issues with the output\r\n                        var row = @\"\"\"\" + string.Join(columnSeparator, rowValues.Select(v => v == null ? \"\" : v.ToString().Replace(\"//\", \"\"))) + @\"\"\"\" ;\r\n                        fileWriter.WriteLine(row);\r\n                    }\r\n                }\r\n                // Close the reader\r\n                daxReader.Close();\r\n            }\r\n    }\r\n\r\n// Notification\r\nInfo( \"Successfully exported \" + fileList.Count + \" \" + fileextension + \" files.\" );",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "Formatacao\\Adicionar Nome da Tabela na Partição com Incremental",
      "Enabled": "true",
      "Execute": "    // Loop through all partitions on the model, replacing oldPQString with newPQString\r\n    foreach(var p in Model.Tables.SelectMany(c => c.Partitions))\r\n    {\r\n        // Verificar se o código M contém o script abaixo utilizado criar tabelas manuais\r\n        string  Table_Name = p.Table.Name;\r\n        string  Partition_Name = p.Name;\r\n        bool    Incremental = Model.Tables[Table_Name].EnableRefreshPolicy;\r\n        bool    Partition_Validation  = p.Name.StartsWith(\"20\") || p.Name.StartsWith(\"19\");\r\n        \r\n        if\r\n            (Incremental && Partition_Validation )\r\n        {\r\n            p.Name = Table_Name + \"_\" + Partition_Name;\r\n        }\r\n\r\n    }",
      "Tooltip": "Adiciona separador de milhar em todas Colunas do modelo",
      "ValidContexts": "Model"
    },
    {
      "Name": "Formatacao\\Adicionar Separador de Milhar Colunas",
      "Enabled": "true",
      "Execute": "//Adaptação do código do linkedin.com/in/yukikakegawa\r\n//https://github.com/StuffbyYuki/TabularEditorScripts/tree/main/Format%20String\r\n\r\nforeach(var c in Model.Tables.SelectMany(c => c.Columns)) \r\n{\r\n    //Salva o formato atual da medida\r\n    string Data_Type = c.DataType.ToString();\r\n    string Format = c.FormatString;\r\n    \r\n    if ( Format == \"\" )\r\n    {\r\n        switch (Data_Type)\r\n       {\r\n        //Data Type quando é double = Decimal\r\n        case \"Double\":\r\n            c.FormatString = \"#,0.############\"; \r\n            break;\r\n\r\n        //Data Type quando é Int64 = Número Inteiro\r\n        case \"Int64\":\r\n            c.FormatString = \"#,0\";\r\n            break;\r\n        \r\n        //Data Type quando é Decimal = Decimal Fixo, ou seja, contém até 4 casas decimais\r\n        case \"Decimal\":\r\n        c.FormatString = \"#,0.####\";\r\n            break;\r\n            \r\n        }\r\n        \r\n    }\r\n}",
      "Tooltip": "Adiciona separador de milhar em todas Colunas do modelo",
      "ValidContexts": "Model"
    },
    {
      "Name": "Formatacao\\Adicionar Separador de Milhar DAX",
      "Enabled": "true",
      "Execute": "//Adaptação do código do linkedin.com/in/yukikakegawa\r\n//https://github.com/StuffbyYuki/TabularEditorScripts/tree/main/Format%20String\r\n\r\nforeach(var c in Model.AllMeasures)\r\n{\r\n    //Salva o formato atual da medida\r\n    string Formato = c.FormatString;\r\n    \r\n    //Salva o tipo atual da medida\r\n    string DataType = c.DataType.ToString();\r\n    \r\n    //Utiliza a função DAX ISNUMBER para verificar se a medida é um numero\r\n    //var daxResult = EvaluateDax(\"ISNUMBER(\" + c.DaxObjectName + \")\");\r\n    \r\n    // se a medida retornar um numero ó resultado é \"True\"\r\n    //string ISNUMBER = daxResult.ToString(); \r\n    \r\n    // Adiciona casa decimal onde as medidas são números\r\n    // e considera somente os formatos abaixo\r\n    if ( DataType == \"Double\" || DataType == \"Decimal\" || DataType == \"Int64\" )\r\n    {\r\n        switch (Formato)\r\n       {\r\n        //Percentual com 2 casas\r\n        case \"0.00%;-0.00%;0.00%\":\r\n            c.FormatString = \"#,0.00%;-#,0.00%;#,0.00%\";\r\n            break;\r\n\r\n        //Percentual com 1 casa\r\n        case \"0.0%;-0.0%;0.0%\":\r\n            c.FormatString = \"#,0.0%;-#,0.0%;#,0.0%\";\r\n            break;\r\n        \r\n        //Percentual com 0 casas\r\n        case \"0%;-0%;0%\":\r\n            c.FormatString = \"#,0%;-#,0%;#,0%\";\r\n            break;\r\n            \r\n         //Decimal com 2 casas\r\n        case \"0.00\":\r\n            c.FormatString = \"#,0.00\";\r\n            break;\r\n            \r\n        //Decimal com 1 casa\r\n        case \"0.0\":\r\n            c.FormatString = \"#,0.0\";\r\n            break;\r\n            \r\n        //Inteiro\r\n        case \"0\":\r\n            c.FormatString = \"#,0\";\r\n            break;\r\n                 \r\n        };\r\n        \r\n    }\r\n    \r\n}",
      "Tooltip": "Adiciona separador de milhar em todas medidas DAX do modelo",
      "ValidContexts": "Model"
    },
    {
      "Name": "Formatacao\\Data Abreviada",
      "Enabled": "true",
      "Execute": "// Long Date to Short Date\r\nforeach(var column in Model.Tables.SelectMany(t => t.Columns)) \r\n    \r\n{ \r\n    if (column.FormatString == \"Long Date\")\r\n        column.FormatString = \"Short Date\";\r\n}",
      "Tooltip": "Transforma todas as datas do modelo de Long Date para Short Date",
      "ValidContexts": "Model"
    },
    {
      "Name": "Formatacao\\DAX nas Descricoes das Medidas",
      "Enabled": "true",
      "Execute": "//Formatação\\Descrição\r\nforeach (var m in Model.AllMeasures) {\r\nm.Description = m.Expression;\r\n}",
      "Tooltip": "Adiciona as medidas DAX como descrição das medidas de todo modelo",
      "ValidContexts": "Model"
    },
    {
      "Name": "Formatacao\\Format Power Query",
      "Enabled": "true",
      "Execute": "using System.Text;\r\nusing Newtonsoft.Json.Linq;\r\nSystem.Net.WebClient client = new System.Net.WebClient();\r\nSystem.Collections.Specialized.NameValueCollection reqparm = new System.Collections.Specialized.NameValueCollection();\r\nEncoding Encoding = new UTF8Encoding(true, true);\r\n    \r\n    // URL da API\r\n    string url = \"https://m-formatter.azurewebsites.net/api/v2\";\r\n    \r\n    // Parametros de configuração da API passando pelo Body como Json\r\n    reqparm.Add(\"resultType\", \"text\");\r\n    reqparm.Add(\"indentationKind\", \"spaces\");\r\n    reqparm.Add(\"indentationLength\", \"2\");\r\n    reqparm.Add(\"lineEnd\", \"\\n\");\r\n    reqparm.Add(\"ws\", \" \");\r\n    reqparm.Add(\"lineWidth\", \"100\");\r\n    reqparm.Add(\"numBrackets\", \"3\");\r\n    reqparm.Add(\"alignPairedLetExpressionsByEqual\", \"singleline\");\r\n    reqparm.Add(\"alignPairedRecordExpressionsByEqual\", \"singleline\");\r\n    reqparm.Add(\"alignLineCommentsToPosition\", \"null\");\r\n    reqparm.Add(\"includeComments\", \"true\");\r\n    // Parametros fixos\r\n    \r\n\r\n    //loop nas partições\r\nforeach(var p in Model.AllPartitions.OfType<MPartition>())\r\n{\r\n    // Copia o código M da tabela\r\n    string QueryM = p.Expression;\r\n     \r\n    // Adiciona o código M para enviar API\r\n    reqparm.Add(\"code\", QueryM);\r\n    \r\n    // Envia os dados para a API\r\n    var responsebytes = client.UploadValues(url, \"POST\", reqparm);\r\n\r\n    // resposta da API \r\n    var responsebody = Encoding.GetString(responsebytes);\r\n\r\n   // Parse the response JSON object from the string\r\n   JObject data = JObject.Parse(responsebody.ToString());\r\n\r\n   // Get the formatted Power Query response\r\n   string formattedPowerQuery = (string)data[\"result\"];\r\n    \r\n   // Substituir o código M antigo pela versão identada\r\n   p.Expression = formattedPowerQuery;\r\n   \r\n   // remove o parametro Code\r\n   reqparm.Remove(\"code\");\r\n       \r\n}",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "Formatacao\\Identar DAX",
      "Enabled": "true",
      "Execute": "//Formatação\\Identar Medidas\r\nModel.AllMeasures.FormatDax();",
      "Tooltip": "Identa todas as medidas do modelo",
      "ValidContexts": "Model"
    },
    {
      "Name": "Formatacao\\Identifica as Chaves Primarias",
      "Enabled": "true",
      "Execute": "// Marca a chave primaria em cada tabela\r\n// analisa todos os relacionamentos ativos e se a cardinalidade for 1\r\n// ele marca essa coluna como chave\r\n// E marca as tabelas calendário como tabela de data\r\n\r\nforeach (var r in Model.Relationships.ToList())\r\n{\r\n    string fromTable = r.FromTable.Name;\r\n    string fromColumn = r.FromColumn.Name;\r\n    \r\n    string toTable = r.ToTable.Name;\r\n    string toColumn = r.ToColumn.Name;\r\n    \r\n    bool   From = Model.Tables[fromTable].Columns[fromColumn].IsKey;\r\n    bool   To   = Model.Tables[toTable].Columns[toColumn].IsKey;\r\n    \r\n    string Object_From = r.FromColumn.DaxObjectFullName; \r\n    string Object_To = r.ToColumn.DaxObjectFullName;\r\n    \r\n    bool Excluir_Tabela_From =  !fromTable.StartsWith(\"LocalDateTable\");\r\n    bool Excluir_Tabela_From2 = !fromTable.StartsWith(\"DateTableTemplate\");\r\n    \r\n    bool Excluir_Tabela_To =  !toTable.StartsWith(\"LocalDateTable\");\r\n    bool Excluir_Tabela_To2 = !toTable.StartsWith(\"DateTableTemplate\");\r\n    \r\n    \r\n    if (r.FromCardinality == RelationshipEndCardinality.One && From == false)\r\n    { \r\n        Model.Tables[fromTable].Columns[fromColumn].IsKey = true;\r\n        \r\n        if (Model.Tables[fromTable].Columns[fromColumn].DataType.ToString() == \"DateTime\" && !Excluir_Tabela_From && !Excluir_Tabela_From2 )\r\n            {\r\n                //----------As Datas são exclusivas-------------------------\r\n    \r\n                string Count_From =   \"COUNT(\"+Object_From+\")\";\r\n               \r\n                string Distinct_From =   \"DISTINCTCOUNT(\"+Object_From+\")\";\r\n                \r\n                string daxResult1_From = EvaluateDax(Count_From + \" = \" + Distinct_From).ToString(); //se  True as Datas são unicas\r\n                \r\n                //----------As Datas são exclusivas-------------------------\r\n                \r\n                \r\n                //--------As Datas não possuem valores nulos ---------------\r\n                \r\n                string Nulos_From =   \"CALCULATE(COUNTROWS(\"+fromTable+\"),\"+Object_From+\" == BLANK())\";\r\n                \r\n                string daxResult2_From = EvaluateDax(Nulos_From + \" == BLANK()\").ToString();//se  True as Datas não possuem valores nulos\r\n                \r\n                //--------As Datas não possuem valores nulos ---------------\r\n                \r\n                //---------------As Datas são continuas --------------------\r\n                \r\n                string Continuo_From = \"(MIN(\"+Object_From+\") + COUNT(\"+Object_From+\") -1) = MAX(\"+Object_From+\")\";\r\n                \r\n                string daxResult3_From = EvaluateDax(Continuo_From).ToString(); //se  True as Datas são continuas\r\n                \r\n                //---------------As Datas são continuas --------------------\r\n                \r\n                //---------------Validação de Datas ------------------------\r\n                \r\n                bool Datas_From = daxResult1_From == \"True\"; //&& daxResult2_From == \"True\" && daxResult3_From == \"True\";\r\n                \r\n                //---------------Validação de Datas ------------------------\r\n                \r\n                if (Datas_From)\r\n                {\r\n                Model.Tables[fromTable].DataCategory = \"Time\";\r\n                }\r\n            }\r\n    }\r\n    \r\n        if (r.ToCardinality == RelationshipEndCardinality.One && To == false)\r\n    {\r\n        Model.Tables[toTable].Columns[toColumn].IsKey = true;\r\n        \r\n        if (Model.Tables[toTable].Columns[toColumn].DataType.ToString() == \"DateTime\" && Excluir_Tabela_To && Excluir_Tabela_To2)\r\n            {\r\n                //----------As Datas são exclusivas-------------------------\r\n    \r\n                string Count_To =   \"COUNT(\"+Object_To+\")\";\r\n               \r\n                string Distinct_To =   \"DISTINCTCOUNT(\"+Object_To+\")\";\r\n                \r\n                string daxResult1_To = EvaluateDax(Count_To + \" = \" + Distinct_To).ToString(); //se  True as Datas são unicas\r\n                \r\n                //----------As Datas são exclusivas-------------------------\r\n                \r\n                \r\n                //--------As Datas não possuem valores nulos ---------------\r\n                \r\n                string Nulos_To =   \"CALCULATE(COUNTROWS(\"+toTable+\"),\"+Object_To+\" == BLANK()) == BLANK()\";\r\n                \r\n                string daxResult2_To = EvaluateDax(Nulos_To).ToString();//se  True as Datas não possuem valores nulos\r\n                \r\n                //--------As Datas não possuem valores nulos ---------------\r\n                \r\n                //---------------As Datas são continuas --------------------\r\n                \r\n                string Continuo_To = \"(MIN(\"+Object_To+\") + COUNT(\"+Object_To+\") -1) = MAX(\"+Object_To+\")\";\r\n                \r\n                string daxResult3_To = EvaluateDax(Continuo_To).ToString(); //se  True as Datas são continuas\r\n                \r\n                //---------------As Datas são continuas --------------------\r\n                \r\n                //---------------Validação de Datas ------------------------\r\n                \r\n                bool Datas_To = daxResult1_To == \"True\" && daxResult2_To == \"True\" && daxResult3_To == \"True\";\r\n                \r\n                //---------------Validação de Datas ------------------------\r\n                \r\n                if (Datas_To)\r\n                {\r\n                Model.Tables[toTable].DataCategory = \"Time\";\r\n                }\r\n            }\r\n    }\r\n    \r\n}",
      "Tooltip": "Identifica as chaves primarias de cada tabela no relatório e marca a tabelas calendário como tabela de data",
      "ValidContexts": "Model"
    },
    {
      "Name": "Formatacao\\Nome da Medida 1° Letra em Maiúsculo",
      "Enabled": "true",
      "Execute": "//O nome de todas as medidas com a primeira letra em maiúsculo\r\n\r\nusing System.Text.RegularExpressions;\r\nforeach(var m in Model.AllMeasures) {\r\n    string Medida = m.Name;\r\n    m.Name = Regex.Replace(Medida, @\"\\b([a-z])\", r => r.Value.ToUpper());\r\n\r\n}  ",
      "Tooltip": "Deixa todas as medidas do modelo com a 1° Letra em Maiúsculo",
      "ValidContexts": "Model"
    },
    {
      "Name": "Formatacao\\Ocultar Relacionamentos",
      "Enabled": "true",
      "Execute": "foreach (var r in Model.Relationships.ToList())\r\n{\r\n    string fromTable = r.FromTable.Name;\r\n    string fromColumn = r.FromColumn.Name;\r\n    \r\n    string toTable = r.ToTable.Name;\r\n    string toColumn = r.ToColumn.Name;\r\n    \r\n\r\n        //Oculta a coluna \r\n        Model.Tables[fromTable].Columns[fromColumn].IsHidden = true;\r\n        //Oculta a coluna \r\n        Model.Tables[toTable].Columns[toColumn].IsHidden = true;\r\n}",
      "Tooltip": "Ocultar colunas utilizadas em relacionamentos",
      "ValidContexts": "Model"
    },
    {
      "Name": "Funcoes\\Atualizar Modelo Calculate",
      "Enabled": "true",
      "Execute": "//https://www.elegantbi.com/post/datarefreshintabulareditor\r\n\r\n#r \"Microsoft.AnalysisServices.Core.dll\"\r\nusing ToM = Microsoft.AnalysisServices.Tabular;\r\n\r\nvar refreshType = ToM.RefreshType.Calculate;\r\nModel.Database.TOMDatabase.Model.RequestRefresh(refreshType); \r\nModel.Database.TOMDatabase.Model.SaveChanges();",
      "Tooltip": "Atualizar o modelo como CALCULATE",
      "ValidContexts": "Model"
    },
    {
      "Name": "Funcoes\\Atualizar Particao",
      "Enabled": "true",
      "Execute": "//https://www.elegantbi.com/post/datarefreshintabulareditor\r\n\r\n\r\n#r \"Microsoft.AnalysisServices.Core.dll\"\r\nusing ToM = Microsoft.AnalysisServices.Tabular;\r\n\r\nvar refreshType = ToM.RefreshType.DataOnly;\r\nToM.SaveOptions so = new ToM.SaveOptions();\r\n//so.MaxParallelism = 10;\r\n\r\nforeach (var p in Selected.Partitions)\r\n{\r\n    string tableName = p.Table.Name;\r\n    string partitionName = p.Name;\r\n    Model.Database.TOMDatabase.Model.Tables[tableName].Partitions[partitionName].RequestRefresh(refreshType); \r\n}\r\n\r\nModel.Database.TOMDatabase.Model.SaveChanges(so);",
      "Tooltip": "Atualiza as partições selecionadas",
      "ValidContexts": "Partition"
    },
    {
      "Name": "Funcoes\\Atualizar Particao FULL",
      "Enabled": "true",
      "Execute": "//https://www.elegantbi.com/post/datarefreshintabulareditor\r\n\r\n\r\n#r \"Microsoft.AnalysisServices.Core.dll\"\r\nusing ToM = Microsoft.AnalysisServices.Tabular;\r\n\r\nvar refreshType = ToM.RefreshType.Full;\r\nToM.SaveOptions so = new ToM.SaveOptions();\r\n//so.MaxParallelism = 10;\r\n\r\nforeach (var p in Selected.Partitions)\r\n{\r\n    string tableName = p.Table.Name;\r\n    string partitionName = p.Name;\r\n    Model.Database.TOMDatabase.Model.Tables[tableName].Partitions[partitionName].RequestRefresh(refreshType); \r\n}\r\n\r\nModel.Database.TOMDatabase.Model.SaveChanges(so);",
      "Tooltip": "Atualiza as partições selecionadas completamente",
      "ValidContexts": "Partition"
    },
    {
      "Name": "Funcoes\\Atualizar Tabela",
      "Enabled": "true",
      "Execute": "//https://www.elegantbi.com/post/datarefreshintabulareditor\r\n\r\n\r\n#r \"Microsoft.AnalysisServices.Core.dll\"\r\nusing ToM = Microsoft.AnalysisServices.Tabular;\r\n\r\nvar refreshType = ToM.RefreshType.DataOnly;\r\nToM.SaveOptions so = new ToM.SaveOptions();\r\n//so.MaxParallelism = 10;\r\n\r\nforeach (var t in Selected.Tables)\r\n{\r\n    string tableName = t.Name;\r\n    Model.Database.TOMDatabase.Model.Tables[tableName].RequestRefresh(refreshType); \r\n}\r\n\r\nModel.Database.TOMDatabase.Model.SaveChanges(so);",
      "Tooltip": "Atualiza as tabelas selecionadas",
      "ValidContexts": "Table"
    },
    {
      "Name": "Funcoes\\Atualizar Tabela Defragment",
      "Enabled": "true",
      "Execute": "//https://www.elegantbi.com/post/datarefreshintabulareditor\r\n\r\n#r \"Microsoft.AnalysisServices.Core.dll\"\r\nusing ToM = Microsoft.AnalysisServices.Tabular;\r\n\r\n// Atualização completa da tabela\r\nvar refreshType = ToM.RefreshType.Defragment;\r\nToM.SaveOptions so = new ToM.SaveOptions();\r\n//so.MaxParallelism = 10;\r\n\r\nforeach (var t in Selected.Tables)\r\n{\r\n    string tableName = t.Name;\r\n    Model.Database.TOMDatabase.Model.Tables[tableName].RequestRefresh(refreshType); \r\n}\r\n\r\nModel.Database.TOMDatabase.Model.SaveChanges(so);",
      "Tooltip": "Atualiza as tabelas selecionadas como Defragment",
      "ValidContexts": "Table"
    },
    {
      "Name": "Funcoes\\Atualizar Tabela FULL",
      "Enabled": "true",
      "Execute": "//https://www.elegantbi.com/post/datarefreshintabulareditor\r\n\r\n#r \"Microsoft.AnalysisServices.Core.dll\"\r\nusing ToM = Microsoft.AnalysisServices.Tabular;\r\n\r\n// Atualização completa da tabela\r\nvar refreshType = ToM.RefreshType.Full;\r\nToM.SaveOptions so = new ToM.SaveOptions();\r\n//so.MaxParallelism = 10;\r\n\r\nforeach (var t in Selected.Tables)\r\n{\r\n    string tableName = t.Name;\r\n    Model.Database.TOMDatabase.Model.Tables[tableName].RequestRefresh(refreshType); \r\n}\r\n\r\nModel.Database.TOMDatabase.Model.SaveChanges(so);",
      "Tooltip": "Atualiza as tabelas selecionadas como FULL",
      "ValidContexts": "Table"
    },
    {
      "Name": "Funcoes\\Listar Tabelas Renner",
      "Enabled": "true",
      "Execute": "using System.Text.RegularExpressions;\r\n\r\n// Regex para pegar idetificar palavras que começam com gold., soliver., bronze_, silver_, db_group_, db_produto_, dbo., bi., transient., reference.\r\nstring pattern = @\"(?i)(?:gold\\.|silver\\.|silver_[a-zA-Z_0-9]*\\.|bronze_[a-zA-Z_0-9]*\\.|db_group_[a-zA-Z_0-9]*\\.|db_produto\\.[a-zA-Z_0-9]*\\.|dbo\\.|dw\\.|bi\\.|transient\\.|reference\\.)[a-zA-Z_0-9]*\";\r\n    List<string> Lista = new List<string>();\r\n\r\n    // Para tabelas sem atualização incremental\r\n    foreach(var p in Selected.Tables.SelectMany(c => c.Partitions))\r\n    {\r\n        // Retorna o código M da partição\r\n        string Query_Partition = p.Expression;\r\n        \r\n        // Identifica se a atualização incremental está ativa para a tabela\r\n        bool   Incremental = p.Table.EnableRefreshPolicy;\r\n        string Query = \"\";\r\n        \r\n        if   // Se incremental true retorna código M da tabela se false retorna da partição\r\n            (!Incremental)\r\n            { \r\n                Query = Regex.Replace(Query_Partition,\"`\",\"\");\r\n            }\r\n        \r\n        // Cria uma lista das strings encontradas em cada tabela ou partição\r\n        var    Result = Regex.Matches(Query, pattern).Cast<Match>().ToList();\r\n        if\r\n            // Retorna resultado somente das tabelas que tiveram pelo menos uma string identificada\r\n            (Result.Count() > 0 )\r\n            {   \r\n                //Acumula o resultado na lista\r\n                Lista.AddRange(Result.Select(i => i.Value));  \r\n            }\r\n        }\r\n        \r\n        \r\n    // Para tabelas com atualização incremental\r\n    foreach(var p in Selected.Tables)\r\n    {\r\n        \r\n        // Retorna o código M da Tabela\r\n        string Query_Table = p.SourceExpression;\r\n        \r\n        // Identifica se a atualização incremental está ativa para a tabela\r\n        bool   Incremental = p.EnableRefreshPolicy;\r\n        string Query = \"\";\r\n        \r\n        if   // Se incremental true retorna código M da tabela se false retorna da partição\r\n            (Incremental)\r\n            {   \r\n                //substitui espaço por vazio\r\n                Query = Regex.Replace(Query_Table,\"`\",\"\");\r\n            }\r\n        \r\n        // Cria uma lista das strings encontradas em cada tabela ou partição\r\n        var    Result = Regex.Matches(Query, pattern).Cast<Match>().ToList();\r\n        if\r\n            // Retorna resultado somente das tabelas que tiveram pelo menos uma string identificada\r\n            (Result.Count() > 0 )\r\n            {   \r\n                //Acumula o resultado na lista\r\n                Lista.AddRange(Result.Select(i => i.Value));\r\n            }\r\n     }\r\n        \r\n//Retorna o resultado da lista acumulada final\r\nstring.Join(\"\\n\", Lista.Distinct().Select(i => i)).Output();",
      "Tooltip": "Lista as tabelas Gold, Silver, Brozen e SandBox",
      "ValidContexts": "Table"
    },
    {
      "Name": "Outros\\Overview do Modelo",
      "Enabled": "true",
      "Execute": "// Count calculation groups & calculation items\r\n   int _calcgroups = 0;\r\n   int _calcitems = 0;\r\n   foreach (  var _calcgroup  in Model.CalculationGroups )\r\n   {\r\n       _calcgroups = _calcgroups + 1;\r\n       foreach (  var _item  in _calcgroup.CalculationItems )\r\n       {\r\n           _calcitems = _calcitems + 1;\r\n       }\r\n   }\r\n   \r\n   // Count partitions and DAX parameters\r\n   int _partitions = 0;\r\n   int _whatifparameters = 0;\r\n   int _fieldparameters = 0;\r\n   foreach (  var _table  in Model.Tables )\r\n   {\r\n       foreach (  var _partition  in _table.Partitions )\r\n       {\r\n           string _type = Convert.ToString(_partition.SourceType);\r\n           string _exp = Convert.ToString(_partition.Expression);\r\n           if ( _type == \"M\" )\r\n           {\r\n               _partitions = _partitions + 1;\r\n           }\r\n           else if ( _type == \"Calculated\" && _exp.Contains(\"NAMEOF\") )\r\n           {\r\n               _fieldparameters = _fieldparameters + 1;\r\n           }\r\n           else if ( _type == \"Calculated\" && _exp.Contains(\"GENERATESERIES\") )\r\n           {\r\n               _whatifparameters = _whatifparameters + 1;\r\n           }\r\n               \r\n       }\r\n   }\r\n   \r\n   // Average measure length\r\n   decimal _numLines = 0;\r\n   decimal _numChars = 0;\r\n   int _measures = Model.AllMeasures.Count();\r\n   foreach ( var _measure in Model.AllMeasures )\r\n   {\r\n       _numLines = _numLines + _measure.Expression.Split('\\n').Length;\r\n       _numChars = _numChars + _measure.Expression.Length;\r\n   }\r\n   _numLines = Math.Round(_numLines / _measures, 1);\r\n   _numChars = Math.Round(_numChars / _measures, 1);\r\n   \r\n   \r\n   // Return the pop-up\r\n   Info (  \r\n               \"In the model, we see the below objects:\\n\\n\"    \r\n           + \"-----------------------------------------\\n\"\r\n           + \"Data Objects\\n\"\r\n           + \"-----------------------------------------\\n\"\r\n           + \" ├─ PQ Expressions: \" + Convert.ToString(Model.Expressions.Count()) + \"\\n\"\r\n           + \" │\\n\"\r\n           + \" └─ Tables: \" + Convert.ToString(Model.Tables.Count()) + \"\\n\"\r\n           + \"       ├─ Incremental Refresh Tables: \" + \r\n               Convert.ToString(Model.Tables.Where(\r\n                   _ir => \r\n                   Convert.ToString(_ir.EnableRefreshPolicy) \r\n                   == \r\n                   \"True\").Count()) + \"\\n\"\r\n   \r\n           + \"       │\\n\"\r\n           + \"       ├─ Calculated Tables: \" + \r\n               Convert.ToString(\r\n                   Model.Tables.Where(\r\n                       _tables => \r\n                       Convert.ToString(_tables.Columns[0].Type) \r\n                       == \r\n                       \"CalculatedTableColumn\").Count()) + \"\\n\"\r\n   \r\n           + \"       │   ├─ What if parameters: \" + \r\n               Convert.ToString(_whatifparameters) + \"\\n\"\r\n           + \"       │   └─ Field parameters: \" + \r\n               Convert.ToString(_fieldparameters) + \"\\n\"\r\n           + \"       │\\n\"\r\n           + \"       ├─ M Partitions: \" + \r\n               Convert.ToString(_partitions) + \"\\n\"\r\n           + \"       │\\n\"\r\n           + \"       └─ Total Table Columns: \" + \r\n               Convert.ToString(Model.AllColumns.Count()) + \"\\n\\n\"\r\n   \r\n           + \"-----------------------------------------\\n\"\r\n           + \"DAX Objects\\n\"\r\n           + \"-----------------------------------------\\n\"\r\n           + \" ├─ Relationships: \" + \r\n               Convert.ToString(Model.Relationships.Count()) + \"\\n\"\r\n           + \" │   ├─ Bi-directional: \" + \r\n               Convert.ToString(Model.Relationships.Where(\r\n                   _relationships => \r\n                   Convert.ToString(_relationships.CrossFilteringBehavior) \r\n                   == \r\n                   \"BothDirections\").Count()) + \"\\n\"\r\n   \r\n           + \" │   ├─ Many-to-Many: \" + \r\n               Convert.ToString(Model.Relationships.Where(\r\n                   _relationships => \r\n                   Convert.ToString(_relationships.FromCardinality) \r\n                   == \r\n                   \"Many\" \r\n                   && \r\n                   Convert.ToString(_relationships.ToCardinality) \r\n                   == \r\n                   \"Many\").Count()) + \"\\n\"\r\n   \r\n           + \" │   ├─ One-to-One: \" + \r\n               Convert.ToString(Model.Relationships.Where(\r\n                   _relationships => \r\n                   Convert.ToString(_relationships.FromCardinality) \r\n                   == \r\n                   \"One\" \r\n                   && \r\n                   Convert.ToString(_relationships.ToCardinality) \r\n                   == \r\n                   \"One\").Count()) + \"\\n\"\r\n   \r\n           + \" │   └─ Inactive: \" + \r\n               Convert.ToString(Model.Relationships.Where(\r\n                   _relationships => \r\n                   Convert.ToString(_relationships.IsActive) \r\n                   == \r\n                   \"False\").Count()) + \"\\n\"\r\n   \r\n           + \" │\\n\"\r\n           + \" ├─ Calculation Groups: \" + \r\n               Convert.ToString(_calcgroups) + \"\\n\"\r\n           + \" │   └─ Calculation Items: \" + \r\n               Convert.ToString(_calcitems) + \"\\n\" \r\n           + \" │\\n\"\r\n           + \" ├─ Calculated Columns: \" + \r\n               Convert.ToString(Model.AllColumns.Where(\r\n                   _columns => \r\n                   Convert.ToString(_columns.Type)   \r\n                   == \r\n                   \"Calculated\").Count()) + \"\\n\"\r\n   \r\n           + \" │\\n\"\r\n           + \" └─ Measures: \" + \r\n               Convert.ToString(_measures) + \"\\n\" \r\n           + \"     └─ Avg. Lines of DAX: \" + \r\n               Convert.ToString(_numLines) + \" Lines \\n\" \r\n           + \"     └─ Avg. Chars of DAX: \" + \r\n               Convert.ToString(_numChars) + \" Characters \\n\\n\" \r\n          \r\n           + \"-----------------------------------------\\n\"\r\n           + \"Other Objects\\n\"\r\n           + \"-----------------------------------------\\n\"\r\n           + \" ├─ Data Security Roles: \" + \r\n               Convert.ToString(Model.Roles.Count()) + \"\\n\"\r\n           + \" ├─ Explicit Data Sources: \" + \r\n               Convert.ToString(Model.DataSources.Count()) + \"\\n\"\r\n           + \" ├─ Perspectives: \" + \r\n               Convert.ToString(Model.Perspectives.Count()) + \"\\n\"\r\n           + \" └─ Translations: \" + \r\n           Convert.ToString(Model.Cultures.Count()));\r\n          \r\n   ",
      "Tooltip": "Visão geral do modelo do Power BI",
      "ValidContexts": "Model"
    },
    {
      "Name": "Performance\\Definir Encoding Hint",
      "Enabled": "true",
      "Execute": "// Store DMV Queries as Data Tables\r\nvar DMV_StorageTableColumns = ExecuteDax(\"SELECT [DIMENSION_NAME],[ATTRIBUTE_NAME],[COLUMN_ENCODING] FROM $SYSTEM.DISCOVER_STORAGE_TABLE_COLUMNS WHERE [COLUMN_TYPE] = 'BASIC_DATA' and not [ISROWNUMBER] \").Tables[0];\r\n\r\n// Set Dictionary Size\r\nfor (int r = 0; r < DMV_StorageTableColumns.Rows.Count; r++)\r\n{\r\n    string tableName = DMV_StorageTableColumns.Rows[r][0].ToString(); //coluna0 = DIMENSION_NAME   \r\n    string colName   = DMV_StorageTableColumns.Rows[r][1].ToString(); //coluna1 = ATTRIBUTE_NAME  \r\n    string EncHint   = DMV_StorageTableColumns.Rows[r][2].ToString(); //coluna2 = COLUMN_ENCODING  \r\n      \r\n    if (EncHint == \"1\")\r\n    {\r\n        //EncodingHint = 1 então Encoding = HASH\r\n        Model.Tables[tableName].Columns[colName].EncodingHint = EncodingHintType.Hash;\r\n    }\r\n    //else\r\n    //{\r\n        //EncodingHint = 2 então Encoding = VALUE\r\n        //Model.Tables[tableName].Columns[colName].EncodingHint = EncodingHintType.Value;\r\n    //}\r\n}",
      "Tooltip": "Desativa o MDX de colunas númerica não utilizadas para ordernar ou coluna ou em alguma hierarquia",
      "ValidContexts": "Model"
    },
    {
      "Name": "Performance\\Desativar Atualizacao de Tabelas Manuais",
      "Enabled": "true",
      "Execute": "\r\nforeach(var p in Model.AllPartitions.OfType<MPartition>())\r\n{\r\n    // Verificar se o código M contém o script abaixo utilizado criar tabelas manuais\r\n    string Query = p.Expression.Replace(\"\\n\", \"\").Replace(\" \", \"\");\r\n    bool   Power_Query = Query.Contains(\"Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText\");\r\n    //bool   Table_Name = p.Name.Contains(table.Name);\r\n    if\r\n        (Power_Query)\r\n    {\r\n        //p.Name.Output();\r\n        p.Table.ExcludeFromModelRefresh = true;\r\n    }\r\n}\r\n",
      "Tooltip": "Desativa a atualização de tabelas manuais criadas no modelo",
      "ValidContexts": "Model"
    },
    {
      "Name": "Performance\\Encoding Hint VALUE",
      "Enabled": "true",
      "Execute": "//Performance/EncodingHint\r\n//for all Int64, Decimal columnsset EncodingHint\r\nforeach(var column in Model.Tables.SelectMany(t => t.Columns))\r\n{\r\nif(column.DataType == DataType.Int64 || column.DataType == DataType.Decimal )\r\n        column.EncodingHint = EncodingHintType.Value;\r\n}",
      "Tooltip": "Seta o encoding hint de colunas de numero inteiro ou decimal fixo em VALUE",
      "ValidContexts": "Model"
    },
    {
      "Name": "Performance\\Identificar Problema de Relacionamento",
      "Enabled": "true",
      "Execute": "// https://www.elegantbi.com/post/findblankrows\r\n\r\n//var sb = new System.Text.StringBuilder();\r\n//string newline = Environment.NewLine;\r\n\r\nforeach (var r in Model.Relationships.ToList())\r\n{\r\n    bool   act = r.IsActive;\r\n    string fromTable = r.FromTable.Name;\r\n    string toTable = r.ToTable.Name;\r\n    string fromTableFull = r.FromTable.DaxObjectFullName;    \r\n    string fromObject = r.FromColumn.DaxObjectFullName;\r\n    string toObject = r.ToColumn.DaxObjectFullName;\r\n    string dax;\r\n    string DAX_Table;\r\n    \r\n    if (act)\r\n    {\r\n        dax = \"SUMMARIZECOLUMNS(\\\"test\\\",CALCULATE(COUNTROWS(\"+fromTableFull+\"),ISBLANK(\"+toObject+\")))\";\r\n        DAX_Table = \"SUMMARIZECOLUMNS(\"+fromObject+\",\\\"Inserir \"+toObject+\"\\\",CALCULATE(COUNTROWS(\"+fromTableFull+\"),ISBLANK(\"+toObject+\")))\";\r\n    }\r\n    else\r\n    {\r\n        dax = \"SUMMARIZECOLUMNS(\\\"test\\\",CALCULATE(COUNTROWS(\"+fromTableFull+\"),USERELATIONSHIP(\"+fromObject+\",\"+toObject+\"),ISBLANK(\"+toObject+\")))\";\r\n        DAX_Table = \"SUMMARIZECOLUMNS(\"+fromObject+\",\\\"Inserir \"+toObject+\"\\\",CALCULATE(COUNTROWS(\"+fromTableFull+\"),USERELATIONSHIP(\"+fromObject+\",\"+toObject+\"),ISBLANK(\"+toObject+\")))\";\r\n    }\r\n    \r\n    var daxResult = EvaluateDax(DAX_Table);\r\n    string blankRowCount = EvaluateDax(dax).ToString();\r\n    \r\n    if (blankRowCount != \"Table\" )\r\n    {\r\n        \r\n        daxResult.Output();      \r\n    }\r\n}",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Name": "Performance\\Inativar AutoDate/Time",
      "Enabled": "true",
      "Execute": "//Inativar AutoDate/Time no modelo do Power BI\r\n//Necessário reiniciar o relatório após essa alteração\r\n\r\n//Verifica se o AutoDate/Time está ativo\r\nif (Model.GetAnnotation(\"__PBI_TimeIntelligenceEnabled\") == \"1\")\r\n{\r\n    // Inativa o AutoDate/Time\r\n    Model.SetAnnotation(\"__PBI_TimeIntelligenceEnabled\",\"0\");\r\n    \r\n    //Exclui as tabelas geradas pelo AutoDate/Time\r\n    foreach(var table in Model.Tables)\r\n    {    \r\n        bool Excluir_Tabela = table.Name.StartsWith(\"LocalDateTable\");\r\n        bool Excluir_Tabela2 = table.Name.StartsWith(\"DateTableTemplate\");\r\n        if\r\n            (Excluir_Tabela ||  Excluir_Tabela2)\r\n        {\r\n            table.Delete();\r\n        }\r\n\r\n    }\r\n}",
      "Tooltip": "Desativa AutoDate/Time e remove as tabelas ocultas criadas",
      "ValidContexts": "Model"
    },
    {
      "Name": "Performance\\MDX_OFF",
      "Enabled": "true",
      "Execute": "foreach(var column in Model.Tables.SelectMany(t => t.Columns))    \r\n\r\n{ \r\n    if( (column.DataType == DataType.Int64 || column.DataType == DataType.Decimal || column.DataType == DataType.Double) &&! column.UsedInSortBy.Any() && ! column.UsedInHierarchies.Any())         \r\n        column.IsAvailableInMDX = false;;   \r\n}",
      "Tooltip": "Desativa o MDX de colunas númerica não utilizadas para ordernar ou coluna ou em alguma hierarquia",
      "ValidContexts": "Model"
    },
    {
      "Name": "Performance\\Otimizador em um Click",
      "Enabled": "true",
      "Execute": "// Ultima Atualizado: 01/09/2023\r\n//\r\n// Resumo das Funções:\r\n/*\r\n01° Desabilitar o Auto Date/Time\r\n02° Alterar data do formato Long Date para Short Date\r\n03° Desativar MDX das colunas numéricas\r\n04° Configurar o Enconding Hint de Todas as colunas \r\n05° Identifica as Chaves Primarias e Marca Calendário como Tabela de Data\r\n06° Oculta Colunas de Relacionamento\r\n07° Identar Coluna Calculada em DAX\r\n08° Adiciona o Separador de Milhar nas Medidas\r\n09° Adiciona o Separador de Milhar nas Colunas\r\n10° Adicionar o DAX da Descrição das Medidas\r\n\r\n*/\r\n\r\n// -----------------  Desabilitar o Auto Date/Time  ---------------------//\r\n\r\n//Inativar AutoDate/Time no modelo do Power BI\r\n//Necessário reiniciar o relatório após essa alteração\r\n\r\n//Verifica se o AutoDate/Time está ativo\r\nif (Model.GetAnnotation(\"__PBI_TimeIntelligenceEnabled\") == \"1\")\r\n{\r\n    // Inativa o AutoDate/Time\r\n    Model.SetAnnotation(\"__PBI_TimeIntelligenceEnabled\",\"0\");\r\n    \r\n    //Exclui as tabelas geradas pelo AutoDate/Time\r\n    foreach(var table in Model.Tables)\r\n    {    \r\n        bool Excluir_Tabela = table.Name.StartsWith(\"LocalDateTable\");\r\n        bool Excluir_Tabela2 = table.Name.StartsWith(\"DateTableTemplate\");\r\n        if\r\n            (Excluir_Tabela ||  Excluir_Tabela2)\r\n        {\r\n            table.Delete();\r\n        }\r\n\r\n    }\r\n}\r\n//-----------------------------------------------------------------------//\r\n\r\n// ---------- Alterar data do formato Long Date para Short Date ---------//\r\nforeach(var column in Model.Tables.SelectMany(t => t.Columns)) \r\n    \r\n{ \r\n    if (column.FormatString == \"Long Date\")\r\n        column.FormatString = \"Short Date\";\r\n}\r\n//-----------------------------------------------------------------------//\r\n\r\n\r\n// ---------------- Desativar MDX das colunas numéricas -----------------//\r\nforeach(var column in Model.Tables.SelectMany(t => t.Columns))    \r\n\r\n{ \r\n    if( (column.DataType == DataType.Int64 || column.DataType == DataType.Decimal || column.DataType == DataType.Double) &&! column.UsedInSortBy.Any() && ! column.UsedInHierarchies.Any())         \r\n        column.IsAvailableInMDX = false;;   \r\n}\r\n//-----------------------------------------------------------------------//\r\n\r\n\r\n// ---------- Configurar o Enconding Hint de Todas as colunas -----------//\r\n\r\n// Store DMV Queries as Data Tables\r\nvar DMV_StorageTableColumns = ExecuteDax(\"SELECT [DIMENSION_NAME],[ATTRIBUTE_NAME],[COLUMN_ENCODING] FROM $SYSTEM.DISCOVER_STORAGE_TABLE_COLUMNS WHERE [COLUMN_TYPE] = 'BASIC_DATA' and not [ISROWNUMBER] \").Tables[0];\r\n\r\n// Set Dictionary Size\r\nfor (int r = 0; r < DMV_StorageTableColumns.Rows.Count; r++)\r\n{\r\n    string tableName = DMV_StorageTableColumns.Rows[r][0].ToString(); //coluna0 = DIMENSION_NAME   \r\n    string colName   = DMV_StorageTableColumns.Rows[r][1].ToString(); //coluna1 = ATTRIBUTE_NAME  \r\n    string EncHint   = DMV_StorageTableColumns.Rows[r][2].ToString(); //coluna2 = COLUMN_ENCODING  \r\n    bool LocalDateTable     = !tableName.StartsWith(\"LocalDateTable\");\r\n    bool DateTableTemplate  = !tableName.StartsWith(\"DateTableTemplate\");\r\n    \r\n    if (LocalDateTable && DateTableTemplate)  \r\n    {\r\n        if (EncHint == \"1\" )\r\n        {\r\n            //EncodingHint = 1 então Encoding = HASH\r\n            Model.Tables[tableName].Columns[colName].EncodingHint = EncodingHintType.Hash;\r\n        }\r\n        else\r\n        {\r\n            //EncodingHint = 2 então Encoding = VALUE\r\n            Model.Tables[tableName].Columns[colName].EncodingHint = EncodingHintType.Value;\r\n        }\r\n    }\r\n}\r\n//-----------------------------------------------------------------------//\r\n\r\n// ----------------- Identifica as Chaves Primarias ---------------------//\r\n\r\n// Marca a chave primaria em cada tabela\r\n// analisa todos os relacionamentos ativos e se a cardinalidade for 1\r\n// ele marca essa coluna como chave\r\n// E marca as tabelas calendário como tabela de data\r\n\r\nforeach (var r in Model.Relationships.ToList())\r\n{\r\n    string fromTable = r.FromTable.Name;\r\n    string fromColumn = r.FromColumn.Name;\r\n    \r\n    string toTable = r.ToTable.Name;\r\n    string toColumn = r.ToColumn.Name;\r\n    \r\n    bool   From = Model.Tables[fromTable].Columns[fromColumn].IsKey;\r\n    bool   To   = Model.Tables[toTable].Columns[toColumn].IsKey;\r\n    \r\n    string Object_From = r.FromColumn.DaxObjectFullName; \r\n    string Object_To = r.ToColumn.DaxObjectFullName;\r\n    \r\n    bool Excluir_Tabela_From =  !fromTable.StartsWith(\"LocalDateTable\");\r\n    bool Excluir_Tabela_From2 = !fromTable.StartsWith(\"DateTableTemplate\");\r\n    \r\n    bool Excluir_Tabela_To =  !toTable.StartsWith(\"LocalDateTable\");\r\n    bool Excluir_Tabela_To2 = !toTable.StartsWith(\"DateTableTemplate\");\r\n    \r\n    \r\n    if (r.FromCardinality == RelationshipEndCardinality.One && From == false)\r\n    { \r\n        Model.Tables[fromTable].Columns[fromColumn].IsKey = true;\r\n        \r\n        if (Model.Tables[fromTable].Columns[fromColumn].DataType.ToString() == \"DateTime\" && !Excluir_Tabela_From && !Excluir_Tabela_From2 )\r\n            {\r\n                //----------As Datas são exclusivas-------------------------\r\n    \r\n                string Count_From =   \"COUNT(\"+Object_From+\")\";\r\n               \r\n                string Distinct_From =   \"DISTINCTCOUNT(\"+Object_From+\")\";\r\n                \r\n                string daxResult1_From = EvaluateDax(Count_From + \" = \" + Distinct_From).ToString(); //se  True as Datas são unicas\r\n                \r\n                //----------As Datas são exclusivas-------------------------\r\n                \r\n                \r\n                //--------As Datas não possuem valores nulos ---------------\r\n                \r\n                string Nulos_From =   \"CALCULATE(COUNTROWS(\"+fromTable+\"),\"+Object_From+\" == BLANK())\";\r\n                \r\n                string daxResult2_From = EvaluateDax(Nulos_From + \" == BLANK()\").ToString();//se  True as Datas não possuem valores nulos\r\n                \r\n                //--------As Datas não possuem valores nulos ---------------\r\n                \r\n                //---------------As Datas são continuas --------------------\r\n                \r\n                string Continuo_From = \"(MIN(\"+Object_From+\") + COUNT(\"+Object_From+\") -1) = MAX(\"+Object_From+\")\";\r\n                \r\n                string daxResult3_From = EvaluateDax(Continuo_From).ToString(); //se  True as Datas são continuas\r\n                \r\n                //---------------As Datas são continuas --------------------\r\n                \r\n                //---------------Validação de Datas ------------------------\r\n                \r\n                bool Datas_From = daxResult1_From == \"True\"; //&& daxResult2_From == \"True\" && daxResult3_From == \"True\";\r\n                \r\n                //---------------Validação de Datas ------------------------\r\n                \r\n                if (Datas_From)\r\n                {\r\n                Model.Tables[fromTable].DataCategory = \"Time\";\r\n                }\r\n            }\r\n    }\r\n    \r\n        if (r.ToCardinality == RelationshipEndCardinality.One && To == false)\r\n    {\r\n        Model.Tables[toTable].Columns[toColumn].IsKey = true;\r\n        \r\n        if (Model.Tables[toTable].Columns[toColumn].DataType.ToString() == \"DateTime\" && Excluir_Tabela_To && Excluir_Tabela_To2)\r\n            {\r\n                //----------As Datas são exclusivas-------------------------\r\n    \r\n                string Count_To =   \"COUNT(\"+Object_To+\")\";\r\n               \r\n                string Distinct_To =   \"DISTINCTCOUNT(\"+Object_To+\")\";\r\n                \r\n                string daxResult1_To = EvaluateDax(Count_To + \" = \" + Distinct_To).ToString(); //se  True as Datas são unicas\r\n                \r\n                //----------As Datas são exclusivas-------------------------\r\n                \r\n                \r\n                //--------As Datas não possuem valores nulos ---------------\r\n                \r\n                string Nulos_To =   \"CALCULATE(COUNTROWS(\"+toTable+\"),\"+Object_To+\" == BLANK()) == BLANK()\";\r\n                \r\n                string daxResult2_To = EvaluateDax(Nulos_To).ToString();//se  True as Datas não possuem valores nulos\r\n                \r\n                //--------As Datas não possuem valores nulos ---------------\r\n                \r\n                //---------------As Datas são continuas --------------------\r\n                \r\n                string Continuo_To = \"(MIN(\"+Object_To+\") + COUNT(\"+Object_To+\") -1) = MAX(\"+Object_To+\")\";\r\n                \r\n                string daxResult3_To = EvaluateDax(Continuo_To).ToString(); //se  True as Datas são continuas\r\n                \r\n                //---------------As Datas são continuas --------------------\r\n                \r\n                //---------------Validação de Datas ------------------------\r\n                \r\n                bool Datas_To = daxResult1_To == \"True\" && daxResult2_To == \"True\" && daxResult3_To == \"True\";\r\n                \r\n                //---------------Validação de Datas ------------------------\r\n                \r\n                if (Datas_To)\r\n                {\r\n                Model.Tables[toTable].DataCategory = \"Time\";\r\n                }\r\n            }\r\n    }\r\n    \r\n}\r\n\r\n//-----------------------------------------------------------------------//\r\n\r\n\r\n// -----------------  Oculta Colunas de Relacionamento  ---------------------//\r\nforeach (var r in Model.Relationships.ToList())\r\n{\r\n    string fromTable = r.FromTable.Name;\r\n    string fromColumn = r.FromColumn.Name;\r\n    \r\n    string toTable = r.ToTable.Name;\r\n    string toColumn = r.ToColumn.Name;\r\n    \r\n    //Verifica se a coluna está visivel\r\n    bool From = Model.Tables[fromTable].Columns[fromColumn].IsHidden == false;\r\n    bool To   = Model.Tables[toTable].Columns[toColumn].IsHidden == false;\r\n    \r\n    if (From)\r\n    {   \r\n        //Oculta a coluna \r\n        Model.Tables[fromTable].Columns[fromColumn].IsHidden = true;\r\n    }\r\n    \r\n    if (To)\r\n    {\r\n        //Oculta a coluna \r\n        Model.Tables[toTable].Columns[toColumn].IsHidden = true;\r\n    }\r\n    \r\n}\r\n//-----------------------------------------------------------------------//\r\n\r\n// -----------------  Identar Coluna Calculada em DAX   -----------------//\r\nforeach(var m in Model.AllColumns)\r\n{\r\n    if(m.Type.ToString() == \"Calculated\"){   \r\n      var y = m  as CalculatedColumn;   \r\n      y.FormatDax();\r\n    }\r\n}\r\n\r\n//-----------------------------------------------------------------------//\r\n\r\n// ------------  Adiciona o Separador de Milhar nas Medidas -------------//\r\n\r\nforeach(var c in Model.AllMeasures)\r\n{\r\n    //Salva o formato atual da medida\r\n    string Formato = c.FormatString;\r\n    \r\n    //Salva o tipo atual da medida\r\n    string DataType = c.DataType.ToString();\r\n        \r\n    // Adiciona casa decimal onde as medidas são números\r\n    // e considera somente os formatos abaixo\r\n    if ( DataType == \"Double\" || DataType == \"Decimal\" || DataType == \"Int64\" )\r\n    {\r\n        switch (Formato)\r\n       {\r\n        //Percentual com 2 casas\r\n        case \"0.00%;-0.00%;0.00%\":\r\n            c.FormatString = \"#,0.00%;-#,0.00%;#,0.00%\";\r\n            break;\r\n\r\n        //Percentual com 1 casa\r\n        case \"0.0%;-0.0%;0.0%\":\r\n            c.FormatString = \"#,0.0%;-#,0.0%;#,0.0%\";\r\n            break;\r\n        \r\n        //Percentual com 0 casas\r\n        case \"0%;-0%;0%\":\r\n            c.FormatString = \"#,0%;-#,0%;#,0%\";\r\n            break;\r\n            \r\n         //Decimal com 2 casas\r\n        case \"0.00\":\r\n            c.FormatString = \"#,0.00\";\r\n            break;\r\n            \r\n        //Decimal com 1 casa\r\n        case \"0.0\":\r\n            c.FormatString = \"#,0.0\";\r\n            break;\r\n            \r\n        //Inteiro\r\n        case \"0\":\r\n            c.FormatString = \"#,0\";\r\n            break;\r\n                 \r\n        };\r\n        \r\n    }\r\n    \r\n}\r\n//-----------------------------------------------------------------------//\r\n\r\n// ------------  Adiciona o Separador de Milhar nas Colunas-------------//\r\nforeach(var c in Model.Tables.SelectMany(c => c.Columns)) \r\n{\r\n    //Salva o formato atual da medida\r\n    string Data_Type = c.DataType.ToString();\r\n    string Format = c.FormatString;\r\n    \r\n\r\n    switch (Data_Type)\r\n   {\r\n    //Data Type quando é double = Decimal\r\n    case \"Double\":\r\n        switch (Format)\r\n        {   \r\n            // 1 casa decimal\r\n            case \"0.0\":\r\n            c.FormatString = \"#,0.0\";\r\n            break;\r\n            \r\n            // 2 casa decimal\r\n            case \"0.00\":\r\n            c.FormatString = \"#,0.00\";\r\n            break;\r\n            \r\n            // 3 casa decimal\r\n            case \"0.000\":\r\n            c.FormatString = \"#,0.000\";\r\n            break;\r\n            \r\n            \r\n            default:\r\n            c.FormatString = \"#,0.############\";\r\n            break;\r\n        }\r\n        break;\r\n\r\n    //Data Type quando é Int64 = Número Inteiro\r\n    case \"Int64\":\r\n        c.FormatString = \"#,0\";\r\n        break;\r\n    \r\n    //Data Type quando é Decimal = Decimal Fixo, ou seja, contém até 4 casas decimais\r\n    case \"Decimal\":\r\n    c.FormatString = \"#,0.####\";\r\n        break;\r\n        \r\n    }\r\n        \r\n}\r\n//-----------------------------------------------------------------------//\r\n\r\n// ------------  Adicionar o DAX da Descrição das Medidas ---------------//\r\n\r\nforeach (var m in Model.AllMeasures) {\r\n  m.Description = m.Expression;\r\n}\r\n\r\n//-----------------------------------------------------------------------//",
      "Tooltip": "Desativa a atualização de tabelas manuais criadas no modelo",
      "ValidContexts": "Model"
    },
    {
      "Name": "Performance\\Paralelismo_Consulta",
      "Enabled": "true",
      "Execute": "Model.MaxParallelismPerRefresh = 10;",
      "Tooltip": "Altera o paralelismo da atualização",
      "ValidContexts": "Model"
    },
    {
      "Name": "Performance\\VertiPaq",
      "Enabled": "true",
      "Execute": "// Store DMV Queries as Data Tables\r\nvar DMV_Tables = ExecuteDax(\"SELECT [ID],[Name] FROM $SYSTEM.TMSCHEMA_TABLES\").Tables[0];\r\nvar DMV_Dimensions = ExecuteDax(\"SELECT [DIMENSION_NAME], [DIMENSION_CARDINALITY] FROM $SYSTEM.MDSCHEMA_DIMENSIONS\").Tables[0];\r\nvar DMV_Relationships = ExecuteDax(\"SELECT [ID],[Name] FROM $SYSTEM.TMSCHEMA_RELATIONSHIPS\").Tables[0];\r\nvar DMV_Hierarchies = ExecuteDax(\"SELECT [ID], [TableID], [Name] FROM $SYSTEM.TMSCHEMA_HIERARCHIES\").Tables[0];\r\nvar DMV_Columns = ExecuteDax(\"SELECT [ID],[TableID],[ExplicitName] FROM $SYSTEM.TMSCHEMA_COLUMNS\").Tables[0];\r\nvar DMV_Partitions = ExecuteDax(\"SELECT [ID],[TableID],[Name] FROM $SYSTEM.TMSCHEMA_PARTITIONS\").Tables[0];\r\nvar DMV_PartitionStorages = ExecuteDax(\"SELECT [ID],[PartitionID] FROM $SYSTEM.TMSCHEMA_PARTITION_STORAGES\").Tables[0];\r\nvar DMV_SegmentMapStorages = ExecuteDax(\"SELECT [PartitionStorageID],[RecordCount],[SegmentCount],[RecordsPerSegment] FROM $SYSTEM.TMSCHEMA_SEGMENT_MAP_STORAGES\").Tables[0];\r\nvar DMV_StorageTableColumns = ExecuteDax(\"SELECT [DIMENSION_NAME],[ATTRIBUTE_NAME],[COLUMN_TYPE],[DICTIONARY_SIZE],[COLUMN_ENCODING] FROM $SYSTEM.DISCOVER_STORAGE_TABLE_COLUMNS\").Tables[0];\r\nvar DMV_StorageTables = ExecuteDax(\"SELECT [DIMENSION_NAME],[TABLE_ID],[ROWS_COUNT] FROM $SYSTEM.DISCOVER_STORAGE_TABLES\").Tables[0];\r\nvar DMV_ColumnSegments = ExecuteDax(\"SELECT [DIMENSION_NAME],[TABLE_ID],[COLUMN_ID],[USED_SIZE] FROM $SYSTEM.DISCOVER_STORAGE_TABLE_COLUMN_SEGMENTS\").Tables[0];\r\n\r\n// Remove Existing Vertipaq Annotations\r\nModel.RemoveAnnotation(\"Vertipaq_ModelSize\");\r\n\r\nforeach (var o in Model.AllHierarchies)\r\n{   \r\n    o.RemoveAnnotation(\"Vertipaq_HierarchyID\");\r\n    o.RemoveAnnotation(\"Vertipaq_UserHierarchySize\");\r\n}\r\n\r\nforeach (var o in Model.AllColumns)\r\n{   \r\n    o.RemoveAnnotation(\"Vertipaq_ColumnID\");\r\n    o.RemoveAnnotation(\"Vertipaq_ColumnHierarchySize\");\r\n    o.RemoveAnnotation(\"Vertipaq_DataSize\");\r\n    o.RemoveAnnotation(\"Vertipaq_DictionarySize\");\r\n    o.RemoveAnnotation(\"Vertipaq_Cardinality\");\r\n    o.RemoveAnnotation(\"Vertipaq_ColumnSize\");\r\n    o.RemoveAnnotation(\"Vertipaq_ColumnSizePctOfTable\");\r\n    o.RemoveAnnotation(\"Vertipaq_ColumnSizePctOfModel\");\r\n    o.RemoveAnnotation(\"Vertipaq_EncodingHint\");\r\n}\r\n\r\nforeach (var o in Model.Relationships.ToList())\r\n{    \r\n    o.RemoveAnnotation(\"Vertipaq_RelationshipID\");\r\n    o.RemoveAnnotation(\"Vertipaq_RelationshipSize\");\r\n    o.RemoveAnnotation(\"Vertipaq_MaxFromCardinality\");\r\n    o.RemoveAnnotation(\"Vertipaq_MaxToCardinality\");\r\n    o.RemoveAnnotation(\"Vertipaq_RIViolationInvalidRows\");\r\n}\r\n\r\nforeach (var o in Model.Tables.ToList())\r\n{\r\n    o.RemoveAnnotation(\"Vertipaq_TableID\");\r\n    o.RemoveAnnotation(\"Vertipaq_RowCount\");\r\n    o.RemoveAnnotation(\"Vertipaq_TableSize\");\r\n    o.RemoveAnnotation(\"Vertipaq_TableSizePctOfModel\");\r\n}\r\n\r\nforeach (var o in Model.AllPartitions)\r\n{\r\n    o.RemoveAnnotation(\"Vertipaq_PartitionID\");\r\n    o.RemoveAnnotation(\"Vertipaq_PartitionStorageID\");\r\n    o.RemoveAnnotation(\"Vertipaq_RecordCount\");\r\n    o.RemoveAnnotation(\"Vertipaq_RecordsPerSegment\");\r\n    o.RemoveAnnotation(\"Vertipaq_SegmentCount\");\r\n}\r\n\r\n// Set Table IDs\r\nfor (int r = 0; r < DMV_Tables.Rows.Count; r++)\r\n{\r\n    string tblID = DMV_Tables.Rows[r][0].ToString();\r\n    string tblName = DMV_Tables.Rows[r][1].ToString();\r\n    \r\n    Model.Tables[tblName].SetAnnotation(\"Vertipaq_TableID\",tblID);         \r\n}\r\n\r\n// Set Table Row Counts\r\nfor (int r = 0; r < DMV_Dimensions.Rows.Count; r++)\r\n{\r\n    string tblName = DMV_Dimensions.Rows[r][0].ToString();\r\n    string recordCount = DMV_Dimensions.Rows[r][1].ToString();\r\n    \r\n    if (tblName != \"Measures\")\r\n    {\r\n        Model.Tables[tblName].SetAnnotation(\"Vertipaq_RowCount\",recordCount);\r\n    }\r\n}\r\n\r\n// Set Relationship IDs\r\nfor (int r = 0; r < DMV_Relationships.Rows.Count; r++)\r\n{\r\n    string ID = DMV_Relationships.Rows[r][0].ToString();   \r\n    string relID = DMV_Relationships.Rows[r][1].ToString();    \r\n    \r\n    Model.Relationships[relID].SetAnnotation(\"Vertipaq_RelationshipID\",ID);    \r\n}\r\n\r\n// Set Hierarchy IDs\r\nfor (int r = 0; r < DMV_Hierarchies.Rows.Count; r++)\r\n{\r\n    string hID = DMV_Hierarchies.Rows[r][0].ToString();\r\n    string tableID = DMV_Hierarchies.Rows[r][1].ToString();\r\n    string hName = DMV_Hierarchies.Rows[r][2].ToString();\r\n    \r\n    foreach (var t in Model.Tables.Where(a => a.GetAnnotation(\"Vertipaq_TableID\") == tableID))\r\n    {\r\n        string tableName = t.Name;\r\n        Model.Tables[tableName].Hierarchies[hName].SetAnnotation(\"Vertipaq_HierarchyID\",hID);\r\n    }        \r\n}\r\n\r\n// Set Column IDs\r\nfor (int r = 0; r < DMV_Columns.Rows.Count; r++)\r\n{\r\n    string colID = DMV_Columns.Rows[r][0].ToString();\r\n    string tableID = DMV_Columns.Rows[r][1].ToString();\r\n    string colName = DMV_Columns.Rows[r][2].ToString();\r\n    \r\n    foreach (var t in Model.Tables.Where(a => a.GetAnnotation(\"Vertipaq_TableID\") == tableID))\r\n    {\r\n        string tableName = t.Name;\r\n        \r\n        if (colName.StartsWith(\"RowNumber-\") == false && colName != \"\")\r\n        {\r\n            Model.Tables[tableName].Columns[colName].SetAnnotation(\"Vertipaq_ColumnID\",colID);\r\n        }\r\n    }\r\n}\r\n\r\n// Set Partition IDs\r\nfor (int r = 0; r < DMV_Partitions.Rows.Count; r++)\r\n{\r\n    string pID = DMV_Partitions.Rows[r][0].ToString();\r\n    string tableID = DMV_Partitions.Rows[r][1].ToString();\r\n    string pName = DMV_Partitions.Rows[r][2].ToString();\r\n    \r\n    foreach (var t in Model.Tables.Where(a => a.GetAnnotation(\"Vertipaq_TableID\") == tableID))\r\n    {\r\n        string tableName = t.Name;\r\n        \r\n        Model.Tables[tableName].Partitions[pName].SetAnnotation(\"Vertipaq_PartitionID\",pID);        \r\n    }\r\n}\r\n\r\n\r\n// Set Partition Storage IDs\r\nfor (int r = 0; r < DMV_PartitionStorages.Rows.Count; r++)\r\n{\r\n    string psID = DMV_PartitionStorages.Rows[r][0].ToString();\r\n    string pID = DMV_PartitionStorages.Rows[r][1].ToString();    \r\n    \r\n    foreach (var p in Model.AllPartitions.Where(a => a.GetAnnotation(\"Vertipaq_PartitionID\") == pID))\r\n    {\r\n        string tableName = p.Table.Name;\r\n        string pName = p.Name;\r\n        \r\n        Model.Tables[tableName].Partitions[pName].SetAnnotation(\"Vertipaq_PartitionStorageID\",psID);        \r\n    }\r\n}\r\n\r\n// Set Partition Stats\r\nfor (int r = 0; r < DMV_SegmentMapStorages.Rows.Count; r++)\r\n{\r\n    string psID = DMV_SegmentMapStorages.Rows[r][0].ToString();\r\n    string recordCount = DMV_SegmentMapStorages.Rows[r][1].ToString();    \r\n    string segmentCount = DMV_SegmentMapStorages.Rows[r][2].ToString();    \r\n    string recordsPerSegment = DMV_SegmentMapStorages.Rows[r][3].ToString();    \r\n    \r\n    foreach (var p in Model.AllPartitions.Where(a => a.GetAnnotation(\"Vertipaq_PartitionStorageID\") == psID))\r\n    {\r\n        string tableName = p.Table.Name;\r\n        string pName = p.Name;\r\n        \r\n        Model.Tables[tableName].Partitions[pName].SetAnnotation(\"Vertipaq_RecordCount\",recordCount);\r\n        Model.Tables[tableName].Partitions[pName].SetAnnotation(\"Vertipaq_SegmentCount\",segmentCount);\r\n        Model.Tables[tableName].Partitions[pName].SetAnnotation(\"Vertipaq_RecordsPerSegment\",recordsPerSegment);\r\n    }\r\n}\r\n\r\n// Set Dictionary Size\r\nfor (int r = 0; r < DMV_StorageTableColumns.Rows.Count; r++)\r\n{\r\n    string tableName = DMV_StorageTableColumns.Rows[r][0].ToString();    \r\n    string colName = DMV_StorageTableColumns.Rows[r][1].ToString();\r\n    string colType = DMV_StorageTableColumns.Rows[r][2].ToString();\r\n    string dictSize = DMV_StorageTableColumns.Rows[r][3].ToString();\r\n    string EncHint = DMV_StorageTableColumns.Rows[r][4].ToString();\r\n      \r\n    if (colType == \"BASIC_DATA\" && colName.StartsWith(\"RowNumber-\") == false)\r\n    {\r\n        if (EncHint == \"1\")\r\n        {\r\n            EncHint = \"HASH\";\r\n        }\r\n        else\r\n        {\r\n            EncHint = \"VALUE\";\r\n        };\r\n        Model.Tables[tableName].Columns[colName].SetAnnotation(\"Vertipaq_DictionarySize\",dictSize);\r\n        Model.Tables[tableName].Columns[colName].SetAnnotation(\"Vertipaq_EncodingHint\",EncHint);\r\n    }\r\n}\r\n\r\n// Set Column Row Counts\r\nfor (int r = 0; r < DMV_StorageTables.Rows.Count; r++)\r\n{\r\n    string tableName = DMV_StorageTables.Rows[r][0].ToString();    \r\n    string usedColumn = DMV_StorageTables.Rows[r][1].ToString();    \r\n    string rowCount = DMV_StorageTables.Rows[r][2].ToString();    \r\n    int lastInd = usedColumn.LastIndexOf(\"(\");\r\n    string usedColumnID = usedColumn.Substring(lastInd+1,usedColumn.Length - lastInd - 2);\r\n    \r\n    \r\n    foreach (var c in Model.Tables[tableName].Columns.Where(a => a.GetAnnotation(\"Vertipaq_ColumnID\") == usedColumnID))\r\n    {\r\n        var colName = c.Name;\r\n        Model.Tables[tableName].Columns[colName].SetAnnotation(\"Vertipaq_Cardinality\",rowCount);\r\n    }    \r\n}\r\n\r\n// User Hierarchy Size\r\nfor (int r = 0; r < DMV_ColumnSegments.Rows.Count; r++)\r\n{\r\n    string tableName = DMV_ColumnSegments.Rows[r][0].ToString();    \r\n    string usedObj = DMV_ColumnSegments.Rows[r][1].ToString();    \r\n    string usedCol = DMV_ColumnSegments.Rows[r][2].ToString();    \r\n    string usedSize = DMV_ColumnSegments.Rows[r][3].ToString();    \r\n    \r\n    int lastInd = usedObj.LastIndexOf(\"(\");\r\n    string usedObjID = usedObj.Substring(lastInd+1,usedObj.Length - lastInd - 2);    \r\n    \r\n    int lastInd2 = usedCol.LastIndexOf(\"(\");\r\n    string usedObjID2 = usedCol.Substring(lastInd2+1,usedCol.Length - lastInd2 - 2);    \r\n    \r\n    // User Hierarchy Size\r\n    foreach (var o in Model.Tables[tableName].Hierarchies.Where(a => a.GetAnnotation(\"Vertipaq_HierarchyID\") == usedObjID))\r\n    {\r\n        string hName = o.Name;\r\n        int hSize = Convert.ToInt32(Model.Tables[tableName].Hierarchies[hName].GetAnnotation(\"Vertipaq_UserHierarchySize\"));\r\n        \r\n        if (usedObj.StartsWith(\"U$\"))\r\n        {\r\n            if (hSize != null)\r\n            {\r\n                hSize = hSize + Convert.ToInt32(usedSize);\r\n            }\r\n            else\r\n            {\r\n                hSize = Convert.ToInt32(usedSize);\r\n            }\r\n        \r\n            Model.Tables[tableName].Hierarchies[hName].SetAnnotation(\"Vertipaq_UserHierarchySize\",hSize.ToString());                \r\n        }   \r\n    }    \r\n    \r\n    // Relationship Size\r\n    foreach (var o in Model.Relationships.Where(a => a.GetAnnotation(\"Vertipaq_RelationshipID\") == usedObjID))\r\n    {\r\n        string rName = o.ID;\r\n        int rSize = Convert.ToInt32(Model.Relationships[rName].GetAnnotation(\"Vertipaq_RelationshipSize\"));\r\n        \r\n        if (usedObj.StartsWith(\"R$\"))\r\n        {\r\n            if (rSize != null)\r\n            {\r\n                rSize = rSize + Convert.ToInt32(usedSize);\r\n            }\r\n            else\r\n            {\r\n                rSize = Convert.ToInt32(usedSize);\r\n            }\r\n        \r\n            Model.Relationships[rName].SetAnnotation(\"Vertipaq_RelationshipSize\",rSize.ToString());                \r\n        }\r\n    }\r\n    \r\n    // Column Hierarchy Size\r\n    foreach (var o in Model.Tables[tableName].Columns.Where(a => a.GetAnnotation(\"Vertipaq_ColumnID\") == usedObjID))\r\n    {\r\n        string colName = o.Name;\r\n        long colSize = Convert.ToInt64(Model.Tables[tableName].Columns[colName].GetAnnotation(\"Vertipaq_ColumnHierarchySize\"));\r\n        \r\n        if (usedObj.StartsWith(\"H$\"))\r\n        {\r\n            if (colSize != null)\r\n            {\r\n                colSize = colSize + Convert.ToInt32(usedSize);\r\n            }\r\n            else\r\n            {\r\n                colSize = Convert.ToInt64(usedSize);\r\n            }\r\n        \r\n            Model.Tables[tableName].Columns[colName].SetAnnotation(\"Vertipaq_ColumnHierarchySize\",colSize.ToString());                \r\n        }   \r\n    }  \r\n    \r\n    // Column Data Size\r\n    foreach (var o in Model.Tables[tableName].Columns.Where(a => a.GetAnnotation(\"Vertipaq_ColumnID\") == usedObjID2))\r\n    {\r\n        string colName = o.Name;\r\n        long colSize = Convert.ToInt64(Model.Tables[tableName].Columns[colName].GetAnnotation(\"Vertipaq_DataSize\"));\r\n        \r\n        if (usedObj.StartsWith(\"H$\") == false && usedObj.StartsWith(\"R$\") == false && usedObj.StartsWith(\"U$\") == false)\r\n        {\r\n            if (colSize != null)\r\n            {\r\n                colSize = colSize + Convert.ToInt64(usedSize);\r\n            }\r\n            else\r\n            {\r\n                colSize = Convert.ToInt64(usedSize);\r\n            }\r\n        \r\n            Model.Tables[tableName].Columns[colName].SetAnnotation(\"Vertipaq_DataSize\",colSize.ToString());                \r\n        }\r\n    }   \r\n}\r\n\r\n// Set Column & Table Size\r\nlong tableSizeCumulative = 0;\r\n\r\nforeach (var t in Model.Tables.ToList())\r\n{\r\n    string tableName = t.Name;\r\n    long colSizeCumulative = 0;\r\n    long userHierSizeCumulative = 0;\r\n    long relSizeCumulative = 0;       \r\n    \r\n    foreach (var c in t.Columns.ToList())\r\n    {        \r\n        string colName = c.Name;\r\n        var obj = Model.Tables[tableName].Columns[colName];\r\n        \r\n        long colHierSize = Convert.ToInt64(obj.GetAnnotation(\"Vertipaq_ColumnHierarchySize\"));\r\n        long dataSize = Convert.ToInt64(obj.GetAnnotation(\"Vertipaq_DataSize\"));\r\n        long dictSize = Convert.ToInt64(obj.GetAnnotation(\"Vertipaq_DictionarySize\"));\r\n        \r\n        long colSize = colHierSize + dataSize + dictSize;\r\n        colSizeCumulative = colSizeCumulative + colSize;        \r\n        \r\n        // Set Column Size\r\n        obj.SetAnnotation(\"Vertipaq_ColumnSize\",colSize.ToString());\r\n    }\r\n    \r\n    foreach (var h in t.Hierarchies.ToList())\r\n    {\r\n        string hName = h.Name;\r\n        var obj = Model.Tables[tableName].Hierarchies[hName];\r\n        \r\n        long userHierSize = Convert.ToInt32(obj.GetAnnotation(\"Vertipaq_UserHierarchySize\"));      \r\n        userHierSizeCumulative = userHierSizeCumulative + userHierSize;           \r\n    }\r\n    \r\n    foreach (var r in Model.Relationships.Where(a => a.FromTable.Name == tableName).ToList())\r\n    {\r\n        string rName = r.ID;\r\n        var obj = Model.Relationships[rName];\r\n        \r\n        long relSize = Convert.ToInt32(obj.GetAnnotation(\"Vertipaq_RelationshipSize\"));\r\n        \r\n        relSizeCumulative = relSizeCumulative + relSize;                \r\n    }\r\n    \r\n    long tableSize = colSizeCumulative + userHierSizeCumulative + relSizeCumulative;\r\n    tableSizeCumulative = tableSizeCumulative + tableSize;\r\n    \r\n    // Set Table Size\r\n    Model.Tables[tableName].SetAnnotation(\"Vertipaq_TableSize\",tableSize.ToString());\r\n}\r\n\r\n// Set Model Size\r\nModel.SetAnnotation(\"Vertipaq_ModelSize\",tableSizeCumulative.ToString());\r\n\r\n// Set Max From/To Cardinality, Referential Integrity Violations\r\nforeach (var r in Model.Relationships.ToList())\r\n{\r\n    string rName = r.ID;\r\n    string fromTbl = r.FromTable.Name;\r\n    string fromCol = r.FromColumn.Name;\r\n    string toTbl = r.ToTable.Name;\r\n    string toCol = r.ToColumn.Name;\r\n    //var obj = Model.Relationships[rName];\r\n    bool act = r.IsActive;\r\n    string fromTableFull = r.FromTable.DaxObjectFullName;    \r\n    string fromObject = r.FromColumn.DaxObjectFullName;\r\n    string toObject = r.ToColumn.DaxObjectFullName;\r\n    string dax;\r\n    \r\n    // Set Max From/To Cardinality\r\n    string fromCard = Model.Tables[fromTbl].Columns[fromCol].GetAnnotation(\"Vertipaq_Cardinality\");\r\n    string toCard = Model.Tables[toTbl].Columns[toCol].GetAnnotation(\"Vertipaq_Cardinality\");\r\n    \r\n    r.SetAnnotation(\"Vertipaq_MaxFromCardinality\",fromCard);\r\n    r.SetAnnotation(\"Vertipaq_MaxToCardinality\",toCard);   \r\n\r\n    // Set Referential Integrity Violations\r\n    if (act)\r\n    {\r\n        dax = \"SUMMARIZECOLUMNS(\\\"test\\\",CALCULATE(COUNTROWS(\"+fromTableFull+\"),ISBLANK(\"+toObject+\")))\";\r\n    }\r\n    else\r\n    {\r\n        dax = \"SUMMARIZECOLUMNS(\\\"test\\\",CALCULATE(COUNTROWS(\"+fromTableFull+\"),USERELATIONSHIP(\"+fromObject+\",\"+toObject+\"),ISBLANK(\"+toObject+\")))\";\r\n    }\r\n    \r\n    var daxResult = EvaluateDax(dax);\r\n    string blankRowCount = daxResult.ToString();\r\n    \r\n    if (blankRowCount != \"Table\")\r\n    {\r\n        r.SetAnnotation(\"Vertipaq_RIViolationInvalidRows\",blankRowCount);        \r\n    }\r\n    else\r\n    {\r\n        r.SetAnnotation(\"Vertipaq_RIViolationInvalidRows\",\"0\");\r\n    }\r\n}\r\n\r\n// Percent of Table and Model\r\nfloat modelSize = Convert.ToInt64(Model.GetAnnotation(\"Vertipaq_ModelSize\"));\r\n\r\nforeach (var t in Model.Tables.ToList())\r\n{\r\n    string tableName = t.Name;\r\n    var obj = Model.Tables[tableName];\r\n    \r\n    float tableSize = Convert.ToInt64(obj.GetAnnotation(\"Vertipaq_TableSize\"));\r\n    double tblpct = Math.Round(tableSize / modelSize,3);\r\n        \r\n    obj.SetAnnotation(\"Vertipaq_TableSizePctOfModel\",tblpct.ToString());\r\n    \r\n    foreach (var c in t.Columns.ToList())\r\n    {\r\n        string colName = c.Name;\r\n        var col = Model.Tables[tableName].Columns[colName];\r\n        \r\n        float colSize = Convert.ToInt64(col.GetAnnotation(\"Vertipaq_ColumnSize\"));\r\n        double colpctTbl = Math.Round(colSize / tableSize,3);\r\n        double colpctModel = Math.Round(colSize / modelSize,3);\r\n        \r\n        col.SetAnnotation(\"Vertipaq_ColumnSizePctOfTable\",colpctTbl.ToString());\r\n        col.SetAnnotation(\"Vertipaq_ColumnSizePctOfModel\",colpctModel.ToString());\r\n    }\r\n}\r\n\r\n// Remove Vertipaq ID Annotations\r\nforeach (var o in Model.AllHierarchies)\r\n{   \r\n    o.RemoveAnnotation(\"Vertipaq_HierarchyID\");\r\n}\r\n\r\nforeach (var o in Model.AllColumns)\r\n{\r\n    o.RemoveAnnotation(\"Vertipaq_ColumnID\");\r\n}\r\n\r\nforeach (var o in Model.Relationships.ToList())\r\n{    \r\n    o.RemoveAnnotation(\"Vertipaq_RelationshipID\");     \r\n}\r\n\r\nforeach (var o in Model.Tables.ToList())\r\n{\r\n    o.RemoveAnnotation(\"Vertipaq_TableID\");\r\n}\r\n\r\nforeach (var o in Model.AllPartitions)\r\n{\r\n    o.RemoveAnnotation(\"Vertipaq_PartitionID\");\r\n    o.RemoveAnnotation(\"Vertipaq_PartitionStorageID\");\r\n}",
      "Tooltip": "Importar regras de melhores práticas do Github",
      "ValidContexts": "Model"
    },
    {
      "Name": "Funcoes\\Qtd de Linhas das Tabelas",
      "Enabled": "true",
      "Execute": "using System.Data;\r\n\r\n// Cria tabela \r\nvar dt = new DataTable();\r\n\r\n// Adiciona a coluna Tabela\r\ndt.Columns.Add(\"Tabela\", typeof(string));\r\n\r\n// Adiciona a coluna Qtd Linhas TXT\r\ndt.Columns.Add(\"Qtd Linhas TXT\", typeof(string));\r\n\r\n// Adiciona a coluna Qtd Linhas\r\ndt.Columns.Add(\"Qtd Linhas\", typeof(int));\r\n\r\n// itera todas as tabelas do modelo\r\nforeach(var table in Model.Tables)\r\n    {    \r\n        // verifica se a tabela possui colunas\r\n        if ( table.Columns.Count() > 0 && !(table.SourceType.ToString() == \"Calculated\") )\r\n        {    \r\n            // nome da tabela\r\n            string Tabela = table.Name;\r\n            \r\n            // Query DAX\r\n            string dax = @\"{COUNTROWS('\" + Tabela + @\"')}\";\r\n            \r\n            // Resultado da Query DAX\r\n            string daxResult = EvaluateDax(dax).ToString();\r\n            \r\n            // Resultado da Query DAX\r\n            string daxResultTXT = EvaluateDax(@\"{FORMAT(\" + dax + @\",\"\"#,0\"\")}\").ToString();\r\n            \r\n            // Adiciona o resultado na tabela\r\n            dt.Rows.Add(Tabela, daxResultTXT, daxResult);\r\n        }\r\n}\r\n    // Ordena a tabela pela quantidade de linhas\r\n    dt.DefaultView.Sort = \"Qtd Linhas desc\";\r\n    \r\n    // Mostra o resultado\r\n    dt.Output(); ",
      "Tooltip": "Conta a quantidade de linhas que cada tabela possui",
      "ValidContexts": "Model"
    }
  ]
}